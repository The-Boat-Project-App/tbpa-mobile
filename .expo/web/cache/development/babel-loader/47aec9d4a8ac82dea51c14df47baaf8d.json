{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport { StyledComponent as _StyledComponent } from \"nativewind\";\nimport React, { useState, useCallback } from 'react';\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport ScreenHeader from \"../../components/ScreenHeader/ScreenHeader\";\nimport { useGetPartnerByIdQuery } from \"../../graphql/graphql\";\nimport LoadingView from \"../../components/LoadingView/LoadingView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PartnerScreen = function PartnerScreen(props) {\n  console.log(props.route.params.partnerId);\n  var _useGetPartnerByIdQue = useGetPartnerByIdQuery({\n      variables: {\n        id: props.route.params.partnerId\n      }\n    }),\n    partnersData = _useGetPartnerByIdQue.data,\n    refetchPartnersData = _useGetPartnerByIdQue.refetch;\n  console.log('data dans partnerScreen', partnersData);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    refreshing = _useState2[0],\n    setRefreshing = _useState2[1];\n  var _useWindowDimensions = useWindowDimensions(),\n    height = _useWindowDimensions.height,\n    width = _useWindowDimensions.width;\n  var wait = function wait(timeout) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, timeout);\n    });\n  };\n  console.log('rerender data dans partnerscreen', partnersData);\n  var onRefresh = useCallback(function () {\n    setRefreshing(true);\n    console.log('data dans onrefresh sur partnerScreen', partnersData);\n    wait(2000).then(function () {\n      refetchPartnersData(), setRefreshing(false);\n    });\n  }, []);\n  if (!partnersData) {\n    return _jsx(LoadingView, {});\n  }\n  return _jsxs(_StyledComponent, {\n    className: \"flex-1 bg-white\",\n    component: SafeAreaView,\n    children: [_jsx(ScreenHeader, {\n      arrowDirection: \"down\"\n    }), _jsx(_StyledComponent, {\n      className: \" px-3 \",\n      showsVerticalScrollIndicator: false,\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        tintColor: \"#87BC23\",\n        colors: ['#87BC23', '#139DB8']\n      }),\n      component: ScrollView\n    })]\n  });\n};\nexport default PartnerScreen;\n_NativeWindStyleSheet.create({\n  styles: {\n    \"mb-4\": {\n      \"marginBottom\": 16\n    },\n    \"mt-2\": {\n      \"marginTop\": 8\n    },\n    \"mb-8\": {\n      \"marginBottom\": 32\n    },\n    \"mb-2\": {\n      \"marginBottom\": 8\n    },\n    \"mb-6\": {\n      \"marginBottom\": 24\n    },\n    \"ml-1\": {\n      \"marginLeft\": 4\n    },\n    \"mb-3\": {\n      \"marginBottom\": 12\n    },\n    \"flex\": {\n      \"display\": \"flex\"\n    },\n    \"h-40\": {\n      \"height\": 160\n    },\n    \"w-1/2\": {\n      \"width\": \"50%\"\n    },\n    \"w-40\": {\n      \"width\": 160\n    },\n    \"flex-1\": {\n      \"flexGrow\": 1,\n      \"flexShrink\": 1,\n      \"flexBasis\": \"0%\"\n    },\n    \"flex-row\": {\n      \"flexDirection\": \"row\"\n    },\n    \"items-center\": {\n      \"alignItems\": \"center\"\n    },\n    \"justify-center\": {\n      \"justifyContent\": \"center\"\n    },\n    \"rounded-full\": {\n      \"borderTopLeftRadius\": 9999,\n      \"borderTopRightRadius\": 9999,\n      \"borderBottomRightRadius\": 9999,\n      \"borderBottomLeftRadius\": 9999\n    },\n    \"bg-white\": {\n      \"backgroundColor\": \"#FFFFFF\"\n    },\n    \"px-3\": {\n      \"paddingLeft\": 12,\n      \"paddingRight\": 12\n    },\n    \"px-4\": {\n      \"paddingLeft\": 16,\n      \"paddingRight\": 16\n    },\n    \"font-ralewayBold\": {\n      \"fontFamily\": \"Raleway_Bold\"\n    },\n    \"font-raleway\": {\n      \"fontFamily\": \"Raleway_400Regular\"\n    },\n    \"color-deepBlue\": {\n      \"color\": \"#272E67\"\n    },\n    \"color-grey\": {\n      \"color\": \"#494848\"\n    },\n    \"text-xl\": {\n      \"fontSize\": 20,\n      \"lineHeight\": 28\n    },\n    \"text-sm\": {\n      \"fontSize\": 14,\n      \"lineHeight\": 20\n    }\n  }\n});","map":{"version":3,"names":["React","useState","useCallback","SafeAreaView","ScreenHeader","useGetPartnerByIdQuery","LoadingView","PartnerScreen","props","console","log","route","params","partnerId","variables","id","partnersData","data","refetchPartnersData","refetch","refreshing","setRefreshing","useWindowDimensions","height","width","wait","timeout","Promise","resolve","setTimeout","onRefresh","then"],"sources":["/Users/matthieu/Documents/tbpa-mobile/screens/PartnerScreen/PartnerScreen.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport { View, Text, Image, useWindowDimensions, ScrollView, RefreshControl } from 'react-native'\nimport { SafeAreaView } from 'react-native-safe-area-context'\nimport ScreenHeader from '@components/ScreenHeader/ScreenHeader'\n\nimport { useGetPartnerByIdQuery } from '../../graphql/graphql'\nimport moment from 'moment'\nimport localization from 'moment/locale/fr'\nimport LoadingView from '@components/LoadingView/LoadingView'\n\nimport { HomeModernIcon, ChatBubbleLeftIcon } from 'react-native-heroicons/outline'\n\ninterface PartnerScreenProps {}\n\nconst PartnerScreen: React.FunctionComponent<PartnerScreenProps> = (props) => {\n  console.log(props.route.params.partnerId)\n  const { data: partnersData, refetch: refetchPartnersData } = useGetPartnerByIdQuery({\n    variables: { id: props.route.params.partnerId },\n  })\n\n  console.log('data dans partnerScreen', partnersData)\n\n  const [refreshing, setRefreshing] = useState<boolean>(false)\n\n  const { height, width } = useWindowDimensions()\n  const wait = (timeout) => {\n    return new Promise((resolve) => setTimeout(resolve, timeout))\n  }\n  console.log('rerender data dans partnerscreen', partnersData)\n  const onRefresh = useCallback(() => {\n    setRefreshing(true)\n    console.log('data dans onrefresh sur partnerScreen', partnersData)\n\n    wait(2000).then(() => {\n      refetchPartnersData(), setRefreshing(false)\n    })\n  }, [])\n\n  if (!partnersData) {\n    return <LoadingView />\n  }\n\n  return (\n    <SafeAreaView className='flex-1 bg-white'>\n      <ScreenHeader arrowDirection='down' />\n      <ScrollView\n        className=' px-3 '\n        showsVerticalScrollIndicator={false}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            tintColor='#87BC23'\n            colors={['#87BC23', '#139DB8']}\n          />\n        }\n      >\n        {/* <View className=' bg-white flex flex-row mb-4 mt-2 justify-center'>\n          {data?.user.firstName && (\n            <View className='w-1/2 justify-center '>\n              <Text className='text-xl color-deepBlue font-ralewayBold '>\n                ðŸ‘‹ Bonjour !{'\\n'}Je m'appelle{'\\n'}\n                {data?.user.firstName}\n              </Text>\n              <Text className='text-sm color-grey font-raleway mb-8'>\n                Membre depuis {moment(data?.user.createdAt).format('MMMM YYYY')}\n              </Text>\n            </View>\n          )}\n\n          <Image\n            className='rounded-full w-40 h-40'\n            source={{\n              uri: data?.user.avatar,\n            }}\n          />\n        </View>\n        <View className='px-4'> */}\n        {/* <View className='flex-row justify-center'>\n            <Toggle isEnabled={false} />\n          </View>\n          <Text className='text-xl color-deepBlue font-ralewayBold mb-2'>Ã€ propos</Text>\n          <Text className='text-sm color-grey font-raleway mb-6'>{data?.user.bio}</Text>\n          <View className='flex flex-row items-center mb-6'>\n            <ChatBubbleLeftIcon size={24} color='#272E67' />\n            <Text className='text-sm color-grey font-raleway ml-1'>\n              Langues :{' '}\n              {data?.user.lang.map((language, index) => {\n                let formattedLanguage = ''\n                if (language === 'FR') {\n                  formattedLanguage = 'FranÃ§ais'\n                }\n                if (language === 'EN') {\n                  formattedLanguage = 'English'\n                }\n                if (language === 'SP') {\n                  formattedLanguage = 'EspaÃ±ol'\n                }\n                if (language === 'AR') {\n                  formattedLanguage = 'Ø¹Ø±Ø¨Ù‰'\n                }\n\n                if (language === 'IT') {\n                  formattedLanguage = 'Italiano'\n                }\n\n                if (index == data?.user.lang.length - 1) {\n                  return `${formattedLanguage}`\n                }\n\n                return `${formattedLanguage} | `\n              })}\n            </Text>\n          </View>\n          <View className='flex flex-row items-center mb-6'>\n            <HomeModernIcon size={24} color='#272E67' />\n            <Text className='text-sm color-grey font-raleway ml-1'>\n              Vient de : {`${data?.user.city}, ${data?.user.country}`}\n            </Text>\n          </View>\n          {userPostsData?.PostsByUserList.length > 0 ? (\n            <Text className='text-xl color-deepBlue font-ralewayBold mb-3 mt-2'>\n              Mes publications\n            </Text>\n          ) : (\n            <Text className='text-xl color-deepBlue font-ralewayBold mb-3'>\n              {data?.user.firstName} n'a encore rien publiÃ©.\n            </Text>\n          )}\n          {userPostsData?.PostsByUserList.map((postItem, index) => {\n            return (\n              <PostCard\n                key={index}\n                id={postItem.id}\n                title={postItem.title}\n                picture={postItem.mainPicture}\n                likes={postItem.likes}\n                comments={postItem.comments}\n                intro={postItem.intro}\n              />\n            )\n          })}\n        </View> */}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nexport default PartnerScreen\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAA;AAAA;AAAA;AAEpD,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,OAAOC,YAAY;AAEnB,SAASC,sBAAsB;AAG/B,OAAOC,WAAW;AAA2C;AAAA;AAM7D,IAAMC,aAA0D,GAAG,SAA7DA,aAA0D,CAAIC,KAAK,EAAK;EAC5EC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,KAAK,CAACC,MAAM,CAACC,SAAS,CAAC;EACzC,4BAA6DR,sBAAsB,CAAC;MAClFS,SAAS,EAAE;QAAEC,EAAE,EAAEP,KAAK,CAACG,KAAK,CAACC,MAAM,CAACC;MAAU;IAChD,CAAC,CAAC;IAFYG,YAAY,yBAAlBC,IAAI;IAAyBC,mBAAmB,yBAA5BC,OAAO;EAInCV,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEM,YAAY,CAAC;EAEpD,gBAAoCf,QAAQ,CAAU,KAAK,CAAC;IAAA;IAArDmB,UAAU;IAAEC,aAAa;EAEhC,2BAA0BC,mBAAmB,EAAE;IAAvCC,MAAM,wBAANA,MAAM;IAAEC,KAAK,wBAALA,KAAK;EACrB,IAAMC,IAAI,GAAG,SAAPA,IAAI,CAAIC,OAAO,EAAK;IACxB,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO;MAAA,OAAKC,UAAU,CAACD,OAAO,EAAEF,OAAO,CAAC;IAAA,EAAC;EAC/D,CAAC;EACDjB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEM,YAAY,CAAC;EAC7D,IAAMc,SAAS,GAAG5B,WAAW,CAAC,YAAM;IAClCmB,aAAa,CAAC,IAAI,CAAC;IACnBZ,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEM,YAAY,CAAC;IAElES,IAAI,CAAC,IAAI,CAAC,CAACM,IAAI,CAAC,YAAM;MACpBb,mBAAmB,EAAE,EAAEG,aAAa,CAAC,KAAK,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACL,YAAY,EAAE;IACjB,OAAO,KAAC,WAAW,KAAG;EACxB;EAEA;IACgB,SAAS,EAAC,iBAAiB;IAAA;IAAA,WACvC,KAAC,YAAY;MAAC,cAAc,EAAC;IAAM,EAAG;MAEpC,SAAS,EAAC,QAAQ;MAClB,4BAA4B,EAAE,KAAM;MACpC,cAAc,EACZ,KAAC,cAAc;QACb,UAAU,EAAEI,UAAW;QACvB,SAAS,EAAEU,SAAU;QACrB,SAAS,EAAC,SAAS;QACnB,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS;MAAE,EAElC;MAAA;IAAA;EAAA;AA2FT,CAAC;AAED,eAAevB,aAAa;AAAA;EAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}