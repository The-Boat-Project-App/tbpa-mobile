{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport ExpoNavigationBar from \"./ExpoNavigationBar\";\nvar _emitter;\nfunction getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter(ExpoNavigationBar);\n  }\n  return _emitter;\n}\nexport function addVisibilityListener(listener) {\n  if (!ExpoNavigationBar.addListener) {\n    throw new UnavailabilityError('NavigationBar', 'addVisibilityListener');\n  }\n  return getEmitter().addListener('ExpoNavigationBar.didChange', listener);\n}\nexport function setBackgroundColorAsync(_x) {\n  return _setBackgroundColorAsync.apply(this, arguments);\n}\nfunction _setBackgroundColorAsync() {\n  _setBackgroundColorAsync = _asyncToGenerator(function* (color) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColorAsync` is only available on Android');\n      return;\n    }\n    var colorNumber = processColor(color);\n    return yield ExpoNavigationBar.setBackgroundColorAsync(colorNumber);\n  });\n  return _setBackgroundColorAsync.apply(this, arguments);\n}\nexport function getBackgroundColorAsync() {\n  return _getBackgroundColorAsync.apply(this, arguments);\n}\nfunction _getBackgroundColorAsync() {\n  _getBackgroundColorAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      console.warn('`getBackgroundColorAsync` is only available on Android');\n      return \"#00000000\";\n    }\n    return yield ExpoNavigationBar.getBackgroundColorAsync();\n  });\n  return _getBackgroundColorAsync.apply(this, arguments);\n}\nexport function setBorderColorAsync(_x2) {\n  return _setBorderColorAsync.apply(this, arguments);\n}\nfunction _setBorderColorAsync() {\n  _setBorderColorAsync = _asyncToGenerator(function* (color) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBorderColorAsync` is only available on Android');\n      return;\n    }\n    var colorNumber = processColor(color);\n    yield ExpoNavigationBar.setBorderColorAsync(colorNumber);\n  });\n  return _setBorderColorAsync.apply(this, arguments);\n}\nexport function getBorderColorAsync() {\n  return _getBorderColorAsync.apply(this, arguments);\n}\nfunction _getBorderColorAsync() {\n  _getBorderColorAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      console.warn('`getBorderColorAsync` is only available on Android');\n      return \"#00000000\";\n    }\n    return yield ExpoNavigationBar.getBorderColorAsync();\n  });\n  return _getBorderColorAsync.apply(this, arguments);\n}\nexport function setVisibilityAsync(_x3) {\n  return _setVisibilityAsync.apply(this, arguments);\n}\nfunction _setVisibilityAsync() {\n  _setVisibilityAsync = _asyncToGenerator(function* (visibility) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setVisibilityAsync` is only available on Android');\n      return;\n    }\n    yield ExpoNavigationBar.setVisibilityAsync(visibility);\n  });\n  return _setVisibilityAsync.apply(this, arguments);\n}\nexport function getVisibilityAsync() {\n  return _getVisibilityAsync.apply(this, arguments);\n}\nfunction _getVisibilityAsync() {\n  _getVisibilityAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      console.warn('`getVisibilityAsync` is only available on Android');\n      return 'hidden';\n    }\n    return ExpoNavigationBar.getVisibilityAsync();\n  });\n  return _getVisibilityAsync.apply(this, arguments);\n}\nexport function setButtonStyleAsync(_x4) {\n  return _setButtonStyleAsync.apply(this, arguments);\n}\nfunction _setButtonStyleAsync() {\n  _setButtonStyleAsync = _asyncToGenerator(function* (style) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setButtonStyleAsync` is only available on Android');\n      return;\n    }\n    yield ExpoNavigationBar.setButtonStyleAsync(style);\n  });\n  return _setButtonStyleAsync.apply(this, arguments);\n}\nexport function getButtonStyleAsync() {\n  return _getButtonStyleAsync.apply(this, arguments);\n}\nfunction _getButtonStyleAsync() {\n  _getButtonStyleAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      console.warn('`getButtonStyleAsync` is only available on Android');\n      return 'light';\n    }\n    return yield ExpoNavigationBar.getButtonStyleAsync();\n  });\n  return _getButtonStyleAsync.apply(this, arguments);\n}\nexport function setPositionAsync(_x5) {\n  return _setPositionAsync.apply(this, arguments);\n}\nfunction _setPositionAsync() {\n  _setPositionAsync = _asyncToGenerator(function* (position) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setPositionAsync` is only available on Android');\n      return;\n    }\n    yield ExpoNavigationBar.setPositionAsync(position);\n  });\n  return _setPositionAsync.apply(this, arguments);\n}\nexport function unstable_getPositionAsync() {\n  return _unstable_getPositionAsync.apply(this, arguments);\n}\nfunction _unstable_getPositionAsync() {\n  _unstable_getPositionAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      console.warn('`unstable_getPositionAsync` is only available on Android');\n      return 'relative';\n    }\n    return yield ExpoNavigationBar.unstable_getPositionAsync();\n  });\n  return _unstable_getPositionAsync.apply(this, arguments);\n}\nexport function setBehaviorAsync(_x6) {\n  return _setBehaviorAsync.apply(this, arguments);\n}\nfunction _setBehaviorAsync() {\n  _setBehaviorAsync = _asyncToGenerator(function* (behavior) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBehaviorAsync` is only available on Android');\n      return;\n    }\n    return yield ExpoNavigationBar.setBehaviorAsync(behavior);\n  });\n  return _setBehaviorAsync.apply(this, arguments);\n}\nexport function getBehaviorAsync() {\n  return _getBehaviorAsync.apply(this, arguments);\n}\nfunction _getBehaviorAsync() {\n  _getBehaviorAsync = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android') {\n      console.warn('`getBehaviorAsync` is only available on Android');\n      return 'inset-touch';\n    }\n    return yield ExpoNavigationBar.getBehaviorAsync();\n  });\n  return _getBehaviorAsync.apply(this, arguments);\n}\nexport function useVisibility() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    visibility = _useState2[0],\n    setVisible = _useState2[1];\n  useEffect(function () {\n    var isMounted = true;\n    if (Platform.OS !== 'android') {\n      setVisible('hidden');\n      return;\n    }\n    getVisibilityAsync().then(function (visibility) {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n    var listener = addVisibilityListener(function (_ref) {\n      var visibility = _ref.visibility;\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n    return function () {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n  return visibility;\n}\nexport * from \"./NavigationBar.types\";","map":{"version":3,"mappings":"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","names":["EventEmitter","Platform","UnavailabilityError","useEffect","useState","ExpoNavigationBar","_emitter","getEmitter","addVisibilityListener","listener","addListener","setBackgroundColorAsync","color","OS","console","warn","colorNumber","processColor","getBackgroundColorAsync","setBorderColorAsync","getBorderColorAsync","setVisibilityAsync","visibility","getVisibilityAsync","setButtonStyleAsync","style","getButtonStyleAsync","setPositionAsync","position","unstable_getPositionAsync","setBehaviorAsync","behavior","getBehaviorAsync","useVisibility","setVisible","isMounted","then","remove"],"sourceRoot":"","sources":["../src/NavigationBar.ts"],"sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { ColorValue, processColor } from 'react-native';\n\nimport ExpoNavigationBar from './ExpoNavigationBar';\nimport {\n  NavigationBarButtonStyle,\n  NavigationBarBehavior,\n  NavigationBarPosition,\n  NavigationBarVisibility,\n  NavigationBarVisibilityEvent,\n} from './NavigationBar.types';\n\nlet _emitter: EventEmitter;\n\n// Lazily initialize the event emitter because it isn't available on iOS,\n// this enables us to use the same code for all platforms.\nfunction getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter(ExpoNavigationBar);\n  }\n  return _emitter;\n}\n\n/**\n * Observe changes to the system navigation bar.\n * Due to platform constraints, this callback will also be triggered when the status bar visibility changes.\n *\n * @example\n * ```ts\n * NavigationBar.addVisibilityListener(({ visibility }) => {\n *   // ...\n * });\n * ```\n */\nexport function addVisibilityListener(\n  listener: (event: NavigationBarVisibilityEvent) => void\n): Subscription {\n  // Assert so the type is non-nullable.\n  if (!ExpoNavigationBar.addListener) {\n    throw new UnavailabilityError('NavigationBar', 'addVisibilityListener');\n  }\n  return getEmitter().addListener('ExpoNavigationBar.didChange', listener);\n}\n\n/**\n * Changes the navigation bar's background color.\n *\n * @example\n * ```ts\n * NavigationBar.setBackgroundColorAsync(\"white\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBackgroundColorAsync(color: ColorValue): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBackgroundColorAsync` is only available on Android');\n    return;\n  }\n  const colorNumber = processColor(color);\n  return await ExpoNavigationBar.setBackgroundColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's background color.\n *\n * @example\n * ```ts\n * const color = await NavigationBar.getBackgroundColorAsync();\n * ```\n * @returns Current navigation bar color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).\n */\nexport async function getBackgroundColorAsync(): Promise<ColorValue> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBackgroundColorAsync` is only available on Android');\n    return `#00000000`;\n  }\n  return await ExpoNavigationBar.getBackgroundColorAsync();\n}\n\n/**\n * Changes the navigation bar's border color.\n *\n * @example\n * ```ts\n * NavigationBar.setBorderColorAsync(\"red\");\n * ```\n * @param color Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).\n */\nexport async function setBorderColorAsync(color: ColorValue): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBorderColorAsync` is only available on Android');\n    return;\n  }\n  const colorNumber = processColor(color);\n  await ExpoNavigationBar.setBorderColorAsync(colorNumber);\n}\n\n/**\n * Gets the navigation bar's top border color, also known as the \"divider color\".\n *\n * @example\n * ```ts\n * const color = await NavigationBar.getBorderColorAsync();\n * ```\n * @returns Navigation bar top border color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).\n */\nexport async function getBorderColorAsync(): Promise<ColorValue> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBorderColorAsync` is only available on Android');\n    return `#00000000`;\n  }\n\n  return await ExpoNavigationBar.getBorderColorAsync();\n}\n\n/**\n * Set the navigation bar's visibility.\n *\n * @example\n * ```ts\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n * @param color Based on CSS visibility property.\n */\nexport async function setVisibilityAsync(visibility: NavigationBarVisibility): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setVisibilityAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setVisibilityAsync(visibility);\n}\n\n/**\n * Get the navigation bar's visibility.\n *\n * @example\n * ```ts\n * const visibility = await NavigationBar.getVisibilityAsync(\"hidden\");\n * ```\n * @returns Navigation bar's current visibility status. Returns `hidden` on unsupported platforms (iOS, web).\n */\nexport async function getVisibilityAsync(): Promise<NavigationBarVisibility> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getVisibilityAsync` is only available on Android');\n    return 'hidden';\n  }\n  return ExpoNavigationBar.getVisibilityAsync();\n}\n\n/**\n * Changes the navigation bar's button colors between white (`light`) and a dark gray color (`dark`).\n *\n * @example\n * ```ts\n * NavigationBar.setButtonStyleAsync(\"light\");\n * ```\n * @param style Dictates the color of the foreground element color.\n */\nexport async function setButtonStyleAsync(style: NavigationBarButtonStyle): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setButtonStyleAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setButtonStyleAsync(style);\n}\n\n/**\n * Gets the navigation bar's button color styles.\n *\n * @example\n * ```ts\n * const style = await NavigationBar.getButtonStyleAsync();\n * ```\n * @returns Navigation bar foreground element color settings. Returns `light` on unsupported platforms (iOS, web).\n */\nexport async function getButtonStyleAsync(): Promise<NavigationBarButtonStyle> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getButtonStyleAsync` is only available on Android');\n    return 'light';\n  }\n  return await ExpoNavigationBar.getButtonStyleAsync();\n}\n\n/**\n * Sets positioning method used for the navigation bar (and status bar).\n * Setting position `absolute` will float the navigation bar above the content,\n * whereas position `relative` will shrink the screen to inline the navigation bar.\n *\n * When drawing behind the status and navigation bars, ensure the safe area insets are adjusted accordingly.\n *\n * @example\n * ```ts\n * // enables edge-to-edge mode\n * await NavigationBar.setPositionAsync('absolute')\n * // transparent backgrounds to see through\n * await NavigationBar.setBackgroundColorAsync('#ffffff00')\n * ```\n * @param position Based on CSS position property.\n */\nexport async function setPositionAsync(position: NavigationBarPosition): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setPositionAsync` is only available on Android');\n    return;\n  }\n  await ExpoNavigationBar.setPositionAsync(position);\n}\n\n/**\n * Whether the navigation and status bars float above the app (absolute) or sit inline with it (relative).\n * This value can be incorrect if `androidNavigationBar.visible` is used instead of the config plugin `position` property.\n *\n * This method is unstable because the position can be set via another native module and get out of sync.\n * Alternatively, you can get the position by measuring the insets returned by `react-native-safe-area-context`.\n *\n * @example\n * ```ts\n * await NavigationBar.unstable_getPositionAsync()\n * ```\n * @returns Navigation bar positional rendering mode. Returns `relative` on unsupported platforms (iOS, web).\n */\nexport async function unstable_getPositionAsync(): Promise<NavigationBarPosition> {\n  if (Platform.OS !== 'android') {\n    console.warn('`unstable_getPositionAsync` is only available on Android');\n    return 'relative';\n  }\n  return await ExpoNavigationBar.unstable_getPositionAsync();\n}\n\n/**\n * Sets the behavior of the status bar and navigation bar when they are hidden and the user wants to reveal them.\n *\n * For example, if the navigation bar is hidden (`setVisibilityAsync(false)`) and the behavior\n * is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the navigation bar.\n *\n * - `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.\n * - `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n * - `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.\n *\n * @example\n * ```ts\n * await NavigationBar.setBehaviorAsync('overlay-swipe')\n * ```\n * @param behavior Dictates the interaction behavior of the navigation bar.\n */\nexport async function setBehaviorAsync(behavior: NavigationBarBehavior): Promise<void> {\n  if (Platform.OS !== 'android') {\n    console.warn('`setBehaviorAsync` is only available on Android');\n    return;\n  }\n  return await ExpoNavigationBar.setBehaviorAsync(behavior);\n}\n\n/**\n * Gets the behavior of the status and navigation bars when the user swipes or touches the screen.\n *\n * @example\n * ```ts\n * await NavigationBar.getBehaviorAsync()\n * ```\n * @returns Navigation bar interaction behavior. Returns `inset-touch` on unsupported platforms (iOS, web).\n */\nexport async function getBehaviorAsync(): Promise<NavigationBarBehavior> {\n  if (Platform.OS !== 'android') {\n    console.warn('`getBehaviorAsync` is only available on Android');\n    return 'inset-touch';\n  }\n  return await ExpoNavigationBar.getBehaviorAsync();\n}\n\n/**\n * React hook that statefully updates with the visibility of the system navigation bar.\n *\n * @example\n * ```ts\n * function App() {\n *   const visibility = NavigationBar.useVisibility()\n *   // React Component...\n * }\n * ```\n * @returns Visibility of the navigation bar, `null` during async initialization.\n */\nexport function useVisibility(): NavigationBarVisibility | null {\n  const [visibility, setVisible] = useState<NavigationBarVisibility | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (Platform.OS !== 'android') {\n      setVisible('hidden');\n      return;\n    }\n    getVisibilityAsync().then((visibility) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    const listener = addVisibilityListener(({ visibility }) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    return () => {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n\n  return visibility;\n}\n\nexport * from './NavigationBar.types';\n"]},"metadata":{},"sourceType":"module"}