{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { StatusBar } from 'expo-status-bar';\nimport RootNavigator from \"./navigation\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { setContext } from '@apollo/client/link/context';\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nLogBox.ignoreAllLogs();\nimport { NativeBaseProvider } from 'native-base';\nimport { useFonts } from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { getAccessToken } from \"./accessToken\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  console.log(\"https://tbpa-backend.herokuapp.com\");\n  var wsLink = new WebSocketLink({\n    uri: 'ws://localhost:3333/subscriptions',\n    options: {\n      reconnect: true\n    }\n  });\n  var httpLink = createHttpLink({\n    uri: \"https://tbpa-backend.herokuapp.com\" + \"/graphql\"\n  });\n  var link = split(function (_ref) {\n    var query = _ref.query;\n    var definition = getMainDefinition(query);\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n  }, wsLink, httpLink);\n  var authLink = setContext(function () {\n    var _ref3 = _asyncToGenerator(function* (_, _ref2) {\n      var headers = _ref2.headers;\n      var accessToken = yield getAccessToken();\n      return {\n        headers: _objectSpread(_objectSpread({}, headers), {}, {\n          authorization: accessToken ? \"Bearer \" + accessToken : ''\n        })\n      };\n    });\n    return function (_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  var cache = new InMemoryCache();\n  var client = new ApolloClient({\n    link: authLink.concat(link.concat(httpLink)),\n    cache: cache,\n    credentials: 'include'\n  });\n  var _useFonts = useFonts({\n      Raleway_400Regular: require(\"./assets/fonts/raleway.regular.ttf\"),\n      Raleway_600SemiBold: require(\"./assets/fonts/raleway.semibold.ttf\"),\n      Raleway_Bold: require(\"./assets/fonts/raleway.bold.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n  return _jsx(ApolloProvider, {\n    client: client,\n    children: _jsxs(NativeBaseProvider, {\n      children: [_jsx(RootNavigator, {}), _jsx(StatusBar, {\n        style: \"auto\"\n      })]\n    })\n  });\n}","map":{"version":3,"names":["StatusBar","RootNavigator","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","split","WebSocketLink","getMainDefinition","setContext","LogBox","ignoreAllLogs","NativeBaseProvider","useFonts","AppLoading","getAccessToken","App","console","log","wsLink","uri","options","reconnect","httpLink","link","query","definition","kind","operation","authLink","_","headers","accessToken","authorization","cache","client","concat","credentials","Raleway_400Regular","require","Raleway_600SemiBold","Raleway_Bold","fontsLoaded"],"sources":["/Users/matthieu/Documents/tbpa-mobile/App.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react'\nimport { StatusBar } from 'expo-status-bar'\nimport RootNavigator from './navigation'\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink, split } from '@apollo/client'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\n\nimport { setContext } from '@apollo/client/link/context'\nimport { LogBox } from 'react-native'\nLogBox.ignoreAllLogs()\nimport { NativeBaseProvider } from 'native-base'\nimport { useFonts } from 'expo-font'\nimport AppLoading from 'expo-app-loading'\n\nimport { getAccessToken } from './accessToken'\n\nexport default function App() {\n  console.log(process.env.API_URL)\n\n  const wsLink = new WebSocketLink({\n    uri: 'ws://localhost:3333/subscriptions',\n    options: {\n      reconnect: true,\n    },\n  })\n  // Initialize Apollo Client\n  const httpLink = createHttpLink({\n    uri: `${process.env.API_URL}/graphql`,\n  })\n  const link = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query)\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\n    },\n    wsLink,\n    httpLink,\n  )\n  //* On passe l'accesstoken dans les headers\n  const authLink = setContext(async (_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    const accessToken = await getAccessToken()\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: accessToken ? `Bearer ${accessToken}` : '',\n      },\n    }\n  })\n  const cache = new InMemoryCache()\n  const client = new ApolloClient({\n    link: authLink.concat(link.concat(httpLink)),\n    cache: cache,\n    credentials: 'include',\n  })\n  const [fontsLoaded] = useFonts({\n    Raleway_400Regular: require('./assets/fonts/raleway.regular.ttf'),\n    Raleway_600SemiBold: require('./assets/fonts/raleway.semibold.ttf'),\n    Raleway_Bold: require('./assets/fonts/raleway.bold.ttf'),\n  })\n  if (!fontsLoaded) {\n    return <AppLoading />\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <NativeBaseProvider>\n        <RootNavigator />\n        <StatusBar style='auto' />\n      </NativeBaseProvider>\n    </ApolloProvider>\n  )\n}\n"],"mappings":";;;;;AACA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,aAAa;AACpB,SAASC,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACnG,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,iBAAiB,QAAQ,0BAA0B;AAE5D,SAASC,UAAU,QAAQ,6BAA6B;AAAA;AAExDC,MAAM,CAACC,aAAa,EAAE;AACtB,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,QAAQ,QAAQ,WAAW;AACpC,OAAOC,UAAU,MAAM,kBAAkB;AAEzC,SAASC,cAAc;AAAuB;AAAA;AAE9C,eAAe,SAASC,GAAG,GAAG;EAC5BC,OAAO,CAACC,GAAG,sCAAqB;EAEhC,IAAMC,MAAM,GAAG,IAAIZ,aAAa,CAAC;IAC/Ba,GAAG,EAAE,mCAAmC;IACxCC,OAAO,EAAE;MACPC,SAAS,EAAE;IACb;EACF,CAAC,CAAC;EAEF,IAAMC,QAAQ,GAAGlB,cAAc,CAAC;IAC9Be,GAAG;EACL,CAAC,CAAC;EACF,IAAMI,IAAI,GAAGlB,KAAK,CAChB,gBAAe;IAAA,IAAZmB,KAAK,QAALA,KAAK;IACN,IAAMC,UAAU,GAAGlB,iBAAiB,CAACiB,KAAK,CAAC;IAC3C,OAAOC,UAAU,CAACC,IAAI,KAAK,qBAAqB,IAAID,UAAU,CAACE,SAAS,KAAK,cAAc;EAC7F,CAAC,EACDT,MAAM,EACNI,QAAQ,CACT;EAED,IAAMM,QAAQ,GAAGpB,UAAU;IAAA,8BAAC,WAAOqB,CAAC,SAAkB;MAAA,IAAdC,OAAO,SAAPA,OAAO;MAE7C,IAAMC,WAAW,SAASjB,cAAc,EAAE;MAE1C,OAAO;QACLgB,OAAO,kCACFA,OAAO;UACVE,aAAa,EAAED,WAAW,eAAaA,WAAW,GAAK;QAAE;MAE7D,CAAC;IACH,CAAC;IAAA;MAAA;IAAA;EAAA,IAAC;EACF,IAAME,KAAK,GAAG,IAAI/B,aAAa,EAAE;EACjC,IAAMgC,MAAM,GAAG,IAAIjC,YAAY,CAAC;IAC9BsB,IAAI,EAAEK,QAAQ,CAACO,MAAM,CAACZ,IAAI,CAACY,MAAM,CAACb,QAAQ,CAAC,CAAC;IAC5CW,KAAK,EAAEA,KAAK;IACZG,WAAW,EAAE;EACf,CAAC,CAAC;EACF,gBAAsBxB,QAAQ,CAAC;MAC7ByB,kBAAkB,EAAEC,OAAO,sCAAsC;MACjEC,mBAAmB,EAAED,OAAO,uCAAuC;MACnEE,YAAY,EAAEF,OAAO;IACvB,CAAC,CAAC;IAAA;IAJKG,WAAW;EAKlB,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,KAAC,UAAU,KAAG;EACvB;EAEA,OACE,KAAC,cAAc;IAAC,MAAM,EAAEP,MAAO;IAAA,UAC7B,MAAC,kBAAkB;MAAA,WACjB,KAAC,aAAa,KAAG,EACjB,KAAC,SAAS;QAAC,KAAK,EAAC;MAAM,EAAG;IAAA;EACP,EACN;AAErB"},"metadata":{},"sourceType":"module"}