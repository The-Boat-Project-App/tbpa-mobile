{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport { StyledComponent as _StyledComponent } from \"nativewind\";\nimport React, { useState, useCallback } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScreenHeader from \"../../components/ScreenHeader/ScreenHeader\";\nimport PostCard from \"../../components/PostCard/PostCard\";\nimport LoadingView from \"../../components/LoadingView/LoadingView\";\nimport { Divider } from 'native-base';\nimport { useGetValidatedPostsQuery } from \"../../graphql/graphql\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AllPostsScreen = function AllPostsScreen(props) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    refreshing = _useState2[0],\n    setRefreshing = _useState2[1];\n  var _useGetValidatedPosts = useGetValidatedPostsQuery(),\n    postsData = _useGetValidatedPosts.data,\n    refetchPostsData = _useGetValidatedPosts.refetch;\n  var _useWindowDimensions = useWindowDimensions(),\n    height = _useWindowDimensions.height,\n    width = _useWindowDimensions.width;\n  var wait = function wait(timeout) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, timeout);\n    });\n  };\n  var onRefresh = useCallback(function () {\n    setRefreshing(true);\n    wait(2000).then(function () {\n      refetchPostsData(), setRefreshing(false);\n    });\n  }, []);\n  if (!postsData) {\n    return _jsx(LoadingView, {});\n  }\n  return _jsxs(_StyledComponent, {\n    className: \"flex-1 bg-white\",\n    component: SafeAreaView,\n    children: [_jsx(ScreenHeader, {}), _jsx(_StyledComponent, {\n      className: \"flex flex-row justify-center mb-4\",\n      component: View,\n      children: _jsx(_StyledComponent, {\n        className: \"text-xl  color-deepBlue font-ralewayBold ml-3 mb-5\",\n        component: Text,\n        children: \"Journal de bord\"\n      })\n    }), _jsx(_StyledComponent, {\n      className: \"mx-3\",\n      showsVerticalScrollIndicator: false,\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: onRefresh,\n        tintColor: \"#87BC23\",\n        colors: ['#87BC23', '#139DB8']\n      }),\n      component: ScrollView,\n      children: postsData == null ? void 0 : postsData.ValidatedPostsList.map(function (postItem, index) {\n        return _jsxs(_Fragment, {\n          children: [_jsx(PostCard, {\n            id: postItem.id,\n            title: postItem.title,\n            picture: postItem.mainPicture,\n            likes: postItem.likes,\n            comments: postItem.comments,\n            intro: postItem.intro\n          }, index), index !== (postsData == null ? void 0 : postsData.ValidatedPostsList.length) - 1 && _jsx(Divider, {\n            bg: \"#dddddd\",\n            thickness: \"1\",\n            my: \"3\",\n            orientation: \"horizontal\"\n          })]\n        });\n      })\n    })]\n  });\n};\nexport default AllPostsScreen;\n_NativeWindStyleSheet.create({\n  styles: {\n    \"mx-3\": {\n      \"marginLeft\": 12,\n      \"marginRight\": 12\n    },\n    \"mb-4\": {\n      \"marginBottom\": 16\n    },\n    \"ml-3\": {\n      \"marginLeft\": 12\n    },\n    \"mb-5\": {\n      \"marginBottom\": 20\n    },\n    \"flex\": {\n      \"display\": \"flex\"\n    },\n    \"flex-1\": {\n      \"flexGrow\": 1,\n      \"flexShrink\": 1,\n      \"flexBasis\": \"0%\"\n    },\n    \"flex-row\": {\n      \"flexDirection\": \"row\"\n    },\n    \"justify-center\": {\n      \"justifyContent\": \"center\"\n    },\n    \"bg-white\": {\n      \"backgroundColor\": \"#FFFFFF\"\n    },\n    \"font-ralewayBold\": {\n      \"fontFamily\": \"Raleway_Bold\"\n    },\n    \"color-deepBlue\": {\n      \"color\": \"#272E67\"\n    },\n    \"text-xl\": {\n      \"fontSize\": 20,\n      \"lineHeight\": 28\n    }\n  }\n});","map":{"version":3,"names":["React","useState","useCallback","ScreenHeader","PostCard","LoadingView","Divider","useGetValidatedPostsQuery","AllPostsScreen","props","refreshing","setRefreshing","postsData","data","refetchPostsData","refetch","useWindowDimensions","height","width","wait","timeout","Promise","resolve","setTimeout","onRefresh","then","ValidatedPostsList","map","postItem","index","id","title","mainPicture","likes","comments","intro","length"],"sources":["/Users/matthieu/Documents/tbpa-mobile/screens/AllPostsScreen/AllPostsScreen.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  ScrollView,\n  SafeAreaView,\n  View,\n  useWindowDimensions,\n  Text,\n  RefreshControl,\n} from 'react-native'\nimport ScreenHeader from '@components/ScreenHeader/ScreenHeader'\nimport PostCard from '@components/PostCard/PostCard'\nimport LoadingView from '@components/LoadingView/LoadingView'\nimport { Divider } from 'native-base'\nimport { useGetValidatedPostsQuery } from '../../graphql/graphql'\n\ninterface AllPostsScreenProps {}\n\nconst AllPostsScreen: React.FunctionComponent<AllPostsScreenProps> = (props) => {\n  // const { data, refetch } = useGetPostsByIdQuery({\n  //   variables: { id: props.route.params.postId },\n  // })\n  // console.log(props.route.params.postId)\n  const [refreshing, setRefreshing] = useState<boolean>(false)\n  const { data: postsData, refetch: refetchPostsData } = useGetValidatedPostsQuery()\n\n  const { height, width } = useWindowDimensions()\n  const wait = (timeout: number) => {\n    return new Promise((resolve) => setTimeout(resolve, timeout))\n  }\n  const onRefresh = useCallback(() => {\n    setRefreshing(true)\n\n    wait(2000).then(() => {\n      refetchPostsData(), setRefreshing(false)\n    })\n  }, [])\n  if (!postsData) {\n    return <LoadingView />\n  }\n  return (\n    <SafeAreaView className='flex-1 bg-white'>\n      <ScreenHeader />\n      <View className='flex flex-row justify-center mb-4'>\n        <Text className='text-xl  color-deepBlue font-ralewayBold ml-3 mb-5'>Journal de bord</Text>\n      </View>\n      <ScrollView\n        className='mx-3'\n        showsVerticalScrollIndicator={false}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            tintColor='#87BC23'\n            colors={['#87BC23', '#139DB8']}\n          />\n        }\n      >\n        {postsData?.ValidatedPostsList.map((postItem, index) => {\n          return (\n            <>\n              <PostCard\n                key={index}\n                id={postItem.id}\n                title={postItem.title}\n                picture={postItem.mainPicture}\n                likes={postItem.likes}\n                comments={postItem.comments}\n                intro={postItem.intro}\n              />\n              {index !== postsData?.ValidatedPostsList.length - 1 && (\n                <Divider bg='#dddddd' thickness='1' my='3' orientation='horizontal' />\n              )}\n            </>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nexport default AllPostsScreen\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUpD,OAAOC,YAAY;AACnB,OAAOC,QAAQ;AACf,OAAOC,WAAW;AAClB,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,yBAAyB;AAA+B;AAAA;AAAA;AAIjE,IAAMC,cAA4D,GAAG,SAA/DA,cAA4D,CAAIC,KAAK,EAAK;EAK9E,gBAAoCR,QAAQ,CAAU,KAAK,CAAC;IAAA;IAArDS,UAAU;IAAEC,aAAa;EAChC,4BAAuDJ,yBAAyB,EAAE;IAApEK,SAAS,yBAAfC,IAAI;IAAsBC,gBAAgB,yBAAzBC,OAAO;EAEhC,2BAA0BC,mBAAmB,EAAE;IAAvCC,MAAM,wBAANA,MAAM;IAAEC,KAAK,wBAALA,KAAK;EACrB,IAAMC,IAAI,GAAG,SAAPA,IAAI,CAAIC,OAAe,EAAK;IAChC,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO;MAAA,OAAKC,UAAU,CAACD,OAAO,EAAEF,OAAO,CAAC;IAAA,EAAC;EAC/D,CAAC;EACD,IAAMI,SAAS,GAAGtB,WAAW,CAAC,YAAM;IAClCS,aAAa,CAAC,IAAI,CAAC;IAEnBQ,IAAI,CAAC,IAAI,CAAC,CAACM,IAAI,CAAC,YAAM;MACpBX,gBAAgB,EAAE,EAAEH,aAAa,CAAC,KAAK,CAAC;IAC1C,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,IAAI,CAACC,SAAS,EAAE;IACd,OAAO,KAAC,WAAW,KAAG;EACxB;EACA;IACgB,SAAS,EAAC,iBAAiB;IAAA;IAAA,WACvC,KAAC,YAAY,KAAG;MACV,SAAS,EAAC,mCAAmC;MAAA;MAAA;QAC3C,SAAS,EAAC,oDAAoD;QAAA;QAAA;MAAA;IAAA;MAGpE,SAAS,EAAC,MAAM;MAChB,4BAA4B,EAAE,KAAM;MACpC,cAAc,EACZ,KAAC,cAAc;QACb,UAAU,EAAEF,UAAW;QACvB,SAAS,EAAEc,SAAU;QACrB,SAAS,EAAC,SAAS;QACnB,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS;MAAE,EAElC;MAAA;MAAA,UAEAZ,SAAS,oBAATA,SAAS,CAAEc,kBAAkB,CAACC,GAAG,CAAC,UAACC,QAAQ,EAAEC,KAAK,EAAK;QACtD,OACE;UAAA,WACE,KAAC,QAAQ;YAEP,EAAE,EAAED,QAAQ,CAACE,EAAG;YAChB,KAAK,EAAEF,QAAQ,CAACG,KAAM;YACtB,OAAO,EAAEH,QAAQ,CAACI,WAAY;YAC9B,KAAK,EAAEJ,QAAQ,CAACK,KAAM;YACtB,QAAQ,EAAEL,QAAQ,CAACM,QAAS;YAC5B,KAAK,EAAEN,QAAQ,CAACO;UAAM,GANjBN,KAAK,CAOV,EACDA,KAAK,KAAK,CAAAjB,SAAS,oBAATA,SAAS,CAAEc,kBAAkB,CAACU,MAAM,IAAG,CAAC,IACjD,KAAC,OAAO;YAAC,EAAE,EAAC,SAAS;YAAC,SAAS,EAAC,GAAG;YAAC,EAAE,EAAC,GAAG;YAAC,WAAW,EAAC;UAAY,EACpE;QAAA,EACA;MAEP,CAAC;IAAC;EAAA;AAIV,CAAC;AAED,eAAe5B,cAAc;AAAA;EAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}