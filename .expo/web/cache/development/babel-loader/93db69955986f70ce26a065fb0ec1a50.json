{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIMGElementState;\nvar _react = require(\"react\");\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _defaultInitialImageDimensions = _interopRequireDefault(require(\"./defaultInitialImageDimensions\"));\nvar _useIMGNormalizedSource = _interopRequireDefault(require(\"./useIMGNormalizedSource\"));\nvar _useImageConcreteDimensions = _interopRequireDefault(require(\"./useImageConcreteDimensions\"));\nvar _getIMGState = require(\"./getIMGState\");\nvar _useImageSpecifiedDimensions = _interopRequireDefault(require(\"./useImageSpecifiedDimensions\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getImageSizeAsync(_ref) {\n  var uri = _ref.uri,\n    headers = _ref.headers;\n  return new Promise(function (onsuccess, onerror) {\n    var onImageDimensionsSuccess = function onImageDimensionsSuccess(width, height) {\n      return onsuccess({\n        width: width,\n        height: height\n      });\n    };\n    if (headers) {\n      _reactNative.Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      _reactNative.Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\nfunction useImageNaturalDimensions(props) {\n  var source = props.source,\n    cachedNaturalDimensions = props.cachedNaturalDimensions;\n  var _ref2 = (0, _react.useState)(cachedNaturalDimensions || null),\n    _ref3 = _slicedToArray(_ref2, 2),\n    naturalDimensions = _ref3[0],\n    setNaturalDimensions = _ref3[1];\n  var _ref4 = cachedNaturalDimensions || {},\n    cachedNaturalWidth = _ref4.width,\n    cachedNaturalHeight = _ref4.height;\n  var _ref5 = (0, _react.useState)(null),\n    _ref6 = _slicedToArray(_ref5, 2),\n    error = _ref6[0],\n    setError = _ref6[1];\n  (0, _react.useEffect)(function resetOnURIChange() {\n    setNaturalDimensions(cachedNaturalWidth != null && cachedNaturalHeight != null ? {\n      width: cachedNaturalWidth,\n      height: cachedNaturalHeight\n    } : null);\n    setError(null);\n  }, [cachedNaturalHeight, cachedNaturalWidth, source.uri]);\n  return {\n    onNaturalDimensions: setNaturalDimensions,\n    onError: setError,\n    naturalDimensions: naturalDimensions,\n    error: error\n  };\n}\nfunction useFetchedNaturalDimensions(props) {\n  var source = props.source,\n    cachedNaturalDimensions = props.cachedNaturalDimensions;\n  var _useImageNaturalDimen = useImageNaturalDimensions(props),\n    error = _useImageNaturalDimen.error,\n    naturalDimensions = _useImageNaturalDimen.naturalDimensions,\n    onError = _useImageNaturalDimen.onError,\n    onNaturalDimensions = _useImageNaturalDimen.onNaturalDimensions;\n  var hasCachedDimensions = !!cachedNaturalDimensions;\n  (0, _react.useEffect)(function fetchPhysicalDimensions() {\n    var cancelled = false;\n    if (source.uri && !hasCachedDimensions) {\n      getImageSizeAsync({\n        uri: source.uri,\n        headers: source.headers\n      }).then(function (dimensions) {\n        return !cancelled && onNaturalDimensions(dimensions);\n      }).catch(function (e) {\n        return !cancelled && onError(e || {});\n      });\n      return function () {\n        cancelled = true;\n      };\n    }\n  }, [source.uri, source.headers, onNaturalDimensions, onError, hasCachedDimensions]);\n  return {\n    naturalDimensions: naturalDimensions,\n    error: error,\n    onError: onError,\n    onNaturalDimensions: onNaturalDimensions\n  };\n}\n\nfunction useIMGElementState(props) {\n  var alt = props.alt,\n    altColor = props.altColor,\n    source = props.source,\n    contentWidth = props.contentWidth,\n    computeMaxWidth = props.computeMaxWidth,\n    objectFit = props.objectFit,\n    _props$initialDimensi = props.initialDimensions,\n    initialDimensions = _props$initialDimensi === void 0 ? _defaultInitialImageDimensions.default : _props$initialDimensi,\n    cachedNaturalDimensions = props.cachedNaturalDimensions;\n  var _ref7 = (0, _useImageSpecifiedDimensions.default)(props),\n    flatStyle = _ref7.flatStyle,\n    specifiedDimensions = _ref7.specifiedDimensions;\n  var nomalizedSource = (0, _useIMGNormalizedSource.default)({\n    specifiedDimensions: specifiedDimensions,\n    source: source\n  });\n  var _useFetchedNaturalDim = useFetchedNaturalDimensions({\n      source: nomalizedSource,\n      specifiedDimensions: specifiedDimensions,\n      cachedNaturalDimensions: cachedNaturalDimensions\n    }),\n    naturalDimensions = _useFetchedNaturalDim.naturalDimensions,\n    onError = _useFetchedNaturalDim.onError,\n    error = _useFetchedNaturalDim.error;\n  var concreteDimensions = (0, _useImageConcreteDimensions.default)({\n    flatStyle: flatStyle,\n    naturalDimensions: naturalDimensions,\n    specifiedDimensions: specifiedDimensions,\n    computeMaxWidth: computeMaxWidth,\n    contentWidth: contentWidth\n  });\n  return (0, _getIMGState.getIMGState)({\n    error: error,\n    alt: alt,\n    altColor: altColor,\n    concreteDimensions: concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions: initialDimensions,\n    objectFit: objectFit,\n    onError: onError,\n    source: nomalizedSource\n  });\n}","map":{"version":3,"mappings":"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","names":["getImageSizeAsync","uri","headers","Promise","onsuccess","onerror","onImageDimensionsSuccess","width","height","Image","getSizeWithHeaders","getSize","useImageNaturalDimensions","props","source","cachedNaturalDimensions","naturalDimensions","setNaturalDimensions","cachedNaturalWidth","cachedNaturalHeight","error","setError","resetOnURIChange","onNaturalDimensions","onError","useFetchedNaturalDimensions","hasCachedDimensions","fetchPhysicalDimensions","cancelled","then","dimensions","catch","e","useIMGElementState","alt","altColor","contentWidth","computeMaxWidth","objectFit","initialDimensions","defaultImageInitialDimensions","flatStyle","specifiedDimensions","nomalizedSource","concreteDimensions","containerStyle"],"sources":["useIMGElementState.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Image, ImageURISource } from 'react-native';\nimport {\n  UseIMGElementStateProps,\n  IMGElementState,\n  IncompleteImageDimensions\n} from './img-types';\nimport defaultImageInitialDimensions from './defaultInitialImageDimensions';\nimport useIMGNormalizedSource from './useIMGNormalizedSource';\nimport { ImageDimensions } from '../shared-types';\nimport useImageConcreteDimensions from './useImageConcreteDimensions';\nimport { getIMGState } from './getIMGState';\nimport useImageSpecifiedDimensions from './useImageSpecifiedDimensions';\n\nfunction getImageSizeAsync({\n  uri,\n  headers\n}: {\n  headers: any;\n  uri: string;\n}): Promise<ImageDimensions> {\n  return new Promise<ImageDimensions>((onsuccess, onerror) => {\n    const onImageDimensionsSuccess = (width: number, height: number) =>\n      onsuccess({ width, height });\n    if (headers) {\n      Image.getSizeWithHeaders(uri, headers, onImageDimensionsSuccess, onerror);\n    } else {\n      Image.getSize(uri, onImageDimensionsSuccess, onerror);\n    }\n  });\n}\n\nfunction useImageNaturalDimensions<P extends UseIMGElementStateProps>(props: {\n  cachedNaturalDimensions?: ImageDimensions;\n  source: ImageURISource;\n  specifiedDimensions: IncompleteImageDimensions;\n}) {\n  const { source, cachedNaturalDimensions } = props;\n  const [naturalDimensions, setNaturalDimensions] = useState<\n    P['cachedNaturalDimensions'] extends ImageDimensions\n      ? ImageDimensions\n      : ImageDimensions | null\n  >((cachedNaturalDimensions as any) || null);\n  const { width: cachedNaturalWidth, height: cachedNaturalHeight } =\n    cachedNaturalDimensions || {};\n  const [error, setError] = useState<null | Error>(null);\n  useEffect(\n    function resetOnURIChange() {\n      setNaturalDimensions(\n        (cachedNaturalWidth != null && cachedNaturalHeight != null\n          ? { width: cachedNaturalWidth, height: cachedNaturalHeight }\n          : null) as any\n      );\n      setError(null);\n    },\n    [cachedNaturalHeight, cachedNaturalWidth, source.uri]\n  );\n  return {\n    onNaturalDimensions: setNaturalDimensions,\n    onError: setError,\n    naturalDimensions,\n    error\n  };\n}\n\nfunction useFetchedNaturalDimensions(props: {\n  cachedNaturalDimensions?: ImageDimensions;\n  source: ImageURISource;\n  specifiedDimensions: IncompleteImageDimensions;\n}) {\n  const { source, cachedNaturalDimensions } = props;\n  const { error, naturalDimensions, onError, onNaturalDimensions } =\n    useImageNaturalDimensions(props);\n  const hasCachedDimensions = !!cachedNaturalDimensions;\n  useEffect(\n    function fetchPhysicalDimensions() {\n      let cancelled = false;\n      if (source.uri && !hasCachedDimensions) {\n        getImageSizeAsync({ uri: source.uri, headers: source.headers })\n          .then((dimensions) => !cancelled && onNaturalDimensions(dimensions))\n          .catch((e) => !cancelled && onError(e || {}));\n        return () => {\n          cancelled = true;\n        };\n      }\n    },\n    [\n      source.uri,\n      source.headers,\n      onNaturalDimensions,\n      onError,\n      hasCachedDimensions\n    ]\n  );\n  return {\n    naturalDimensions,\n    error,\n    onError,\n    onNaturalDimensions\n  };\n}\n\n/**\n * This hook will compute concrete dimensions from image natural dimensions and\n * constraints. It will fetch the image and get its dimensions.\n *\n * @remarks If you know the dimensions beforehand, use\n * {@link useIMGElementStateWithCache} instead to save a network request and\n * prevent a layout shift.\n */\nexport default function useIMGElementState(\n  props: UseIMGElementStateProps\n): IMGElementState {\n  const {\n    alt,\n    altColor,\n    source,\n    contentWidth,\n    computeMaxWidth,\n    objectFit,\n    initialDimensions = defaultImageInitialDimensions,\n    cachedNaturalDimensions\n  } = props;\n  const { flatStyle, specifiedDimensions } = useImageSpecifiedDimensions(props);\n  const nomalizedSource = useIMGNormalizedSource({\n    specifiedDimensions,\n    source\n  });\n  const { naturalDimensions, onError, error } = useFetchedNaturalDimensions({\n    source: nomalizedSource,\n    specifiedDimensions,\n    cachedNaturalDimensions\n  });\n  const concreteDimensions = useImageConcreteDimensions({\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions,\n    computeMaxWidth,\n    contentWidth\n  });\n\n  return getIMGState({\n    error,\n    alt,\n    altColor,\n    concreteDimensions,\n    containerStyle: flatStyle,\n    initialDimensions,\n    objectFit,\n    onError,\n    source: nomalizedSource\n  });\n}\n"]},"metadata":{},"sourceType":"script"}