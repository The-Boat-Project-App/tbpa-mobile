{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = buildTREFromConfig;\nvar _transientRenderEngine = _interopRequireDefault(require(\"@native-html/transient-render-engine\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction buildTREFromConfig(props) {\n  var allowedStyles = props.allowedStyles,\n    _props$ignoredStyles = props.ignoredStyles,\n    ignoredStyles = _props$ignoredStyles === void 0 ? [] : _props$ignoredStyles,\n    ignoredDomTags = props.ignoredDomTags,\n    ignoreDomNode = props.ignoreDomNode,\n    domVisitors = props.domVisitors,\n    htmlParserOptions = props.htmlParserOptions,\n    baseStyle = props.baseStyle,\n    classesStyles = props.classesStyles,\n    tagsStyles = props.tagsStyles,\n    idsStyles = props.idsStyles,\n    enableCSSInlineProcessing = props.enableCSSInlineProcessing,\n    enableUserAgentStyles = props.enableUserAgentStyles,\n    _props$systemFonts = props.systemFonts,\n    systemFonts = _props$systemFonts === void 0 ? [] : _props$systemFonts,\n    _props$fallbackFonts = props.fallbackFonts,\n    fallbackFonts = _props$fallbackFonts === void 0 ? {} : _props$fallbackFonts,\n    _props$customHTMLElem = props.customHTMLElementModels,\n    customHTMLElementModels = _props$customHTMLElem === void 0 ? {} : _props$customHTMLElem,\n    emSize = props.emSize,\n    setMarkersForTNode = props.setMarkersForTNode,\n    selectDomRoot = props.selectDomRoot,\n    dangerouslyDisableHoisting = props.dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing = props.dangerouslyDisableWhitespaceCollapsing;\n  var customizeHTMLModels = Object.keys(customHTMLElementModels).length ? function (defaultModels) {\n    return _objectSpread(_objectSpread({}, defaultModels), customHTMLElementModels);\n  } : undefined;\n  var fontMap = {};\n  systemFonts.forEach(function (font) {\n    fontMap[font] = true;\n  });\n  var isFontSupported = function isFontSupported(fontFamily) {\n    if (fallbackFonts[fontFamily]) {\n      return fallbackFonts[fontFamily];\n    }\n\n    return fontMap[fontFamily] || false;\n  };\n  return new _transientRenderEngine.default({\n    customizeHTMLModels: customizeHTMLModels,\n    cssProcessorConfig: {\n      isFontSupported: isFontSupported,\n      inlinePropertiesBlacklist: ignoredStyles,\n      inlinePropertiesWhitelist: allowedStyles,\n      rootFontSize: emSize\n    },\n    htmlParserOptions: _objectSpread({\n      decodeEntities: true\n    }, htmlParserOptions),\n    stylesConfig: {\n      baseStyle: baseStyle,\n      enableCSSInlineProcessing: enableCSSInlineProcessing,\n      enableUserAgentStyles: enableUserAgentStyles,\n      classesStyles: classesStyles,\n      idsStyles: idsStyles,\n      tagsStyles: tagsStyles\n    },\n    ignoredDomTags: ignoredDomTags,\n    ignoreDomNode: ignoreDomNode,\n    domVisitors: domVisitors,\n    setMarkersForTNode: setMarkersForTNode,\n    selectDomRoot: selectDomRoot,\n    dangerouslyDisableHoisting: dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing: dangerouslyDisableWhitespaceCollapsing\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;AACA;;;;;;;AAae,SAASA,kBAAT,CAA4BC,KAA5B,EAAwD;EACrE,IACEC,aADI,GAsBFD,KAtBJ,CACEC,aADI;IAAA,uBAsBFD,KAtBJ,CAGEE,aAAa;IAAbA,aAAa,qCAAG,EAHZ;IAIJC,cAJI,GAsBFH,KAtBJ,CAIEG,cAJI;IAKJC,aALI,GAsBFJ,KAtBJ,CAKEI,aALI;IAMJC,WANI,GAsBFL,KAtBJ,CAMEK,WANI;IAOJC,iBAPI,GAsBFN,KAtBJ,CAOEM,iBAPI;IAQJC,SARI,GAsBFP,KAtBJ,CAQEO,SARI;IASJC,aATI,GAsBFR,KAtBJ,CASEQ,aATI;IAUJC,UAVI,GAsBFT,KAtBJ,CAUES,UAVI;IAWJC,SAXI,GAsBFV,KAtBJ,CAWEU,SAXI;IAYJC,yBAZI,GAsBFX,KAtBJ,CAYEW,yBAZI;IAaJC,qBAbI,GAsBFZ,KAtBJ,CAaEY,qBAbI;IAAA,qBAsBFZ,KAtBJ,CAcEa,WAAW;IAAXA,WAAW,mCAAG,EAdV;IAAA,uBAsBFb,KAtBJ,CAeEc,aAAa;IAAbA,aAAa,qCAAG,EAfZ;IAAA,wBAsBFd,KAtBJ,CAgBEe,uBAAuB;IAAvBA,uBAAuB,sCAAG,EAhBtB;IAiBJC,MAjBI,GAsBFhB,KAtBJ,CAiBEgB,MAjBI;IAkBJC,kBAlBI,GAsBFjB,KAtBJ,CAkBEiB,kBAlBI;IAmBJC,aAnBI,GAsBFlB,KAtBJ,CAmBEkB,aAnBI;IAoBJC,0BApBI,GAsBFnB,KAtBJ,CAoBEmB,0BApBI;IAqBJC,yCACEpB,KAtBJ,CAqBEoB;EAEF,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYR,uBAAZ,EAAqCS,MAArC,GACvBC,uBAAD,EAAuE;IACrE,uCAAYA,aAAL,GAAuBV;EAC/B,CAHuB,GAIxBW,SAJJ;EAKA,IAAMC,OAAO,GAAG,EAAhB;EACAd,WAAW,CAACe,OAAZ,CAAqBC,cAAD,EAAU;IAC5BF,OAAO,CAACE,IAAD,CAAP,GAAgB,IAAhB;EACD,CAFD;EAGA,IAAMC,eAAe,GAAIC,SAAnBD,eAAe,CAAIC,UAAD,EAAwB;IAC9C,IAAIjB,aAAa,CAACiB,UAAD,CAAjB,EAA6D;MAC3D,OAAOjB,aAAa,CAACiB,UAAD,CAApB;IACD;;IAED,OAAOJ,OAAO,CAACI,UAAD,CAAP,IAAuB,KAA9B;EACD,CAND;EAOA,OAAO,IAAIC,8BAAJ,CAAkB;IACvBX,mBADuB,EACvBA,mBADuB;IAEvBY,kBAAkB,EAAE;MAClBH,eADkB,EAClBA,eADkB;MAElBI,yBAAyB,EAAEhC,aAFT;MAGlBiC,yBAAyB,EAAElC,aAHT;MAIlBmC,YAAY,EAAEpB;IAJI,CAFG;IAQvBV,iBAAiB;MACf+B,cAAc,EAAE;IADC,GAEd/B,kBAVkB;IAYvBgC,YAAY,EAAE;MACZ/B,SADY,EACZA,SADY;MAEZI,yBAFY,EAEZA,yBAFY;MAGZC,qBAHY,EAGZA,qBAHY;MAIZJ,aAJY,EAIZA,aAJY;MAKZE,SALY,EAKZA,SALY;MAMZD;IANY,CAZS;IAoBvBN,cApBuB,EAoBvBA,cApBuB;IAqBvBC,aArBuB,EAqBvBA,aArBuB;IAsBvBC,WAtBuB,EAsBvBA,WAtBuB;IAuBvBY,kBAvBuB,EAuBvBA,kBAvBuB;IAwBvBC,aAxBuB,EAwBvBA,aAxBuB;IAyBvBC,0BAzBuB,EAyBvBA,0BAzBuB;IA0BvBC;EA1BuB,CAAlB,CAAP;AA4BD","names":["buildTREFromConfig","props","allowedStyles","ignoredStyles","ignoredDomTags","ignoreDomNode","domVisitors","htmlParserOptions","baseStyle","classesStyles","tagsStyles","idsStyles","enableCSSInlineProcessing","enableUserAgentStyles","systemFonts","fallbackFonts","customHTMLElementModels","emSize","setMarkersForTNode","selectDomRoot","dangerouslyDisableHoisting","dangerouslyDisableWhitespaceCollapsing","customizeHTMLModels","Object","keys","length","defaultModels","undefined","fontMap","forEach","font","isFontSupported","fontFamily","TRenderEngine","cssProcessorConfig","inlinePropertiesBlacklist","inlinePropertiesWhitelist","rootFontSize","decodeEntities","stylesConfig"],"sources":["buildTREFromConfig.ts"],"sourcesContent":["import { TRenderEngineConfig } from '../shared-types';\nimport TRenderEngine, {\n  HTMLModelRecord,\n  TagName\n} from '@native-html/transient-render-engine';\n\n/**\n * Build a {@link TRenderEngine} instance from a configuration object.\n *\n * @remarks This utility can be useful to test and debug the TRE layer of your\n * application.\n *\n * @param props - The configuration from which a TRE should be built.\n */\nexport default function buildTREFromConfig(props: TRenderEngineConfig) {\n  const {\n    allowedStyles,\n    // TODO fix upstream\n    ignoredStyles = [],\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    htmlParserOptions,\n    baseStyle,\n    classesStyles,\n    tagsStyles,\n    idsStyles,\n    enableCSSInlineProcessing,\n    enableUserAgentStyles,\n    systemFonts = [],\n    fallbackFonts = {},\n    customHTMLElementModels = {},\n    emSize,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  } = props;\n  const customizeHTMLModels = Object.keys(customHTMLElementModels).length\n    ? (defaultModels: HTMLModelRecord<TagName>): HTMLModelRecord<TagName> => {\n        return { ...defaultModels, ...customHTMLElementModels };\n      }\n    : undefined;\n  const fontMap = {} as Record<string, true>;\n  systemFonts.forEach((font) => {\n    fontMap[font] = true;\n  });\n  const isFontSupported = (fontFamily: string) => {\n    if (fallbackFonts[fontFamily as keyof typeof fallbackFonts]) {\n      return fallbackFonts[fontFamily as keyof typeof fallbackFonts];\n    }\n    /* istanbul ignore next */\n    return fontMap[fontFamily] || false;\n  };\n  return new TRenderEngine({\n    customizeHTMLModels,\n    cssProcessorConfig: {\n      isFontSupported,\n      inlinePropertiesBlacklist: ignoredStyles,\n      inlinePropertiesWhitelist: allowedStyles,\n      rootFontSize: emSize\n    },\n    htmlParserOptions: {\n      decodeEntities: true,\n      ...htmlParserOptions\n    },\n    stylesConfig: {\n      baseStyle,\n      enableCSSInlineProcessing,\n      enableUserAgentStyles,\n      classesStyles,\n      idsStyles,\n      tagsStyles\n    },\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  });\n}\n"]},"metadata":{},"sourceType":"script"}