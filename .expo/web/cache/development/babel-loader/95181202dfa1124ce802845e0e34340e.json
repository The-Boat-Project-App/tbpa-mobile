{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TDefaultTextRenderer = exports.TDefaultPhrasingRenderer = exports.TDefaultBlockRenderer = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _SharedPropsProvider = require(\"./context/SharedPropsProvider\");\nvar _useAssembledCommonProps = _interopRequireDefault(require(\"./hooks/useAssembledCommonProps\"));\nvar _TChildrenRendererContext = require(\"./context/TChildrenRendererContext\");\nvar _renderTextualContent = _interopRequireDefault(require(\"./renderTextualContent\"));\nvar _RenderRegistryProvider = require(\"./context/RenderRegistryProvider\");\nvar _renderBlockContent = _interopRequireDefault(require(\"./renderBlockContent\"));\nvar _renderEmptyContent = _interopRequireDefault(require(\"./renderEmptyContent\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nvar TDefaultBlockRenderer = _renderBlockContent.default.bind(null);\nexports.TDefaultBlockRenderer = TDefaultBlockRenderer;\nTDefaultBlockRenderer.displayName = 'TDefaultBlockRenderer';\nvar TDefaultPhrasingRenderer = _renderTextualContent.default.bind(null);\nexports.TDefaultPhrasingRenderer = TDefaultPhrasingRenderer;\nTDefaultPhrasingRenderer.displayName = 'TDefaultPhrasingRenderer';\nvar TDefaultTextRenderer = _renderTextualContent.default.bind(null);\nexports.TDefaultTextRenderer = TDefaultTextRenderer;\nTDefaultTextRenderer.displayName = 'TDefaultTextRenderer';\nfunction isGhostTNode(tnode) {\n  return tnode.type === 'text' && (tnode.data === '' || tnode.data === ' ') || tnode.type === 'empty';\n}\n\nvar TNodeRenderer = (0, _react.memo)(function MemoizedTNodeRenderer(props) {\n  var tnode = props.tnode;\n  var sharedProps = (0, _SharedPropsProvider.useSharedProps)();\n  var renderRegistry = (0, _RenderRegistryProvider.useRendererRegistry)();\n  var TNodeChildrenRenderer = (0, _TChildrenRendererContext.useTNodeChildrenRenderer)();\n  var tnodeProps = _objectSpread(_objectSpread({}, props), {}, {\n    TNodeChildrenRenderer: TNodeChildrenRenderer,\n    sharedProps: sharedProps\n  });\n  var renderer = tnode.type === 'block' || tnode.type === 'document' ? TDefaultBlockRenderer : tnode.type === 'text' ? TDefaultTextRenderer : tnode.type === 'phrasing' ? TDefaultPhrasingRenderer : _renderEmptyContent.default;\n  var _ref = (0, _useAssembledCommonProps.default)(tnodeProps, renderer),\n    assembledProps = _ref.assembledProps,\n    Renderer = _ref.Renderer;\n  switch (tnode.type) {\n    case 'empty':\n      return (0, _renderEmptyContent.default)(assembledProps);\n    case 'text':\n      var InternalTextRenderer = renderRegistry.getInternalTextRenderer(props.tnode.tagName);\n      if (InternalTextRenderer) {\n        return _react.default.createElement(InternalTextRenderer, tnodeProps);\n      }\n\n      if (tnodeProps.tnode.data === '' && tnodeProps.sharedProps.enableExperimentalGhostLinesPrevention) {\n        return null;\n      }\n      break;\n    case 'phrasing':\n      if (tnodeProps.sharedProps.bypassAnonymousTPhrasingNodes && tnodeProps.tnode.tagName == null && tnodeProps.tnode.children.length <= 1) {\n        return _react.default.createElement(TNodeChildrenRenderer, {\n          tnode: props.tnode\n        });\n      }\n\n      if (tnodeProps.sharedProps.enableExperimentalGhostLinesPrevention && tnodeProps.tnode.tagName == null && tnodeProps.tnode.children.every(isGhostTNode)) {\n        return null;\n      }\n      break;\n  }\n  var renderFn = tnode.type === 'block' || tnode.type === 'document' ? _renderBlockContent.default : _renderTextualContent.default;\n  return Renderer === null ? renderFn(assembledProps) : _react.default.createElement(Renderer, assembledProps);\n});\nvar defaultProps = {\n  propsFromParent: {\n    collapsedMarginTop: null\n  }\n};\n\nTNodeRenderer.defaultProps = defaultProps;\nvar _default = TNodeRenderer;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["TDefaultBlockRenderer","renderBlockContent","bind","displayName","TDefaultPhrasingRenderer","renderTextualContent","TDefaultTextRenderer","isGhostTNode","tnode","type","data","TNodeRenderer","MemoizedTNodeRenderer","props","sharedProps","renderRegistry","TNodeChildrenRenderer","tnodeProps","renderer","renderEmptyContent","assembledProps","Renderer","InternalTextRenderer","getInternalTextRenderer","tagName","React","createElement","enableExperimentalGhostLinesPrevention","bypassAnonymousTPhrasingNodes","children","length","every","renderFn","defaultProps","propsFromParent","collapsedMarginTop"],"sources":["TNodeRenderer.tsx"],"sourcesContent":["import React, { memo, ReactElement } from 'react';\nimport { TDefaultRenderer, TNodeRendererProps } from './shared-types';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport {\n  TText,\n  TBlock,\n  TNode,\n  TPhrasing\n} from '@native-html/transient-render-engine';\nimport useAssembledCommonProps from './hooks/useAssembledCommonProps';\nimport { useTNodeChildrenRenderer } from './context/TChildrenRendererContext';\nimport renderTextualContent from './renderTextualContent';\nimport { useRendererRegistry } from './context/RenderRegistryProvider';\nimport renderBlockContent from './renderBlockContent';\nimport renderEmptyContent from './renderEmptyContent';\n\nexport type { TNodeRendererProps } from './shared-types';\n\nconst TDefaultBlockRenderer: TDefaultRenderer<TBlock> =\n  renderBlockContent.bind(null);\n\nTDefaultBlockRenderer.displayName = 'TDefaultBlockRenderer';\n\nconst TDefaultPhrasingRenderer: TDefaultRenderer<TPhrasing> =\n  renderTextualContent.bind(null);\n\nTDefaultPhrasingRenderer.displayName = 'TDefaultPhrasingRenderer';\n\nconst TDefaultTextRenderer: TDefaultRenderer<TText> =\n  renderTextualContent.bind(null);\n\nTDefaultTextRenderer.displayName = 'TDefaultTextRenderer';\n\nfunction isGhostTNode(tnode: TNode) {\n  return (\n    (tnode.type === 'text' && (tnode.data === '' || tnode.data === ' ')) ||\n    tnode.type === 'empty'\n  );\n}\n\n/**\n * A component to render any {@link TNode}.\n */\nconst TNodeRenderer = memo(function MemoizedTNodeRenderer(\n  props: TNodeRendererProps<any>\n): ReactElement | null {\n  const { tnode } = props;\n  const sharedProps = useSharedProps();\n  const renderRegistry = useRendererRegistry();\n  const TNodeChildrenRenderer = useTNodeChildrenRenderer();\n  const tnodeProps = {\n    ...props,\n    TNodeChildrenRenderer,\n    sharedProps\n  };\n  const renderer =\n    tnode.type === 'block' || tnode.type === 'document'\n      ? TDefaultBlockRenderer\n      : tnode.type === 'text'\n      ? TDefaultTextRenderer\n      : tnode.type === 'phrasing'\n      ? TDefaultPhrasingRenderer\n      : renderEmptyContent;\n\n  const { assembledProps, Renderer } = useAssembledCommonProps(\n    tnodeProps,\n    renderer as any\n  );\n  switch (tnode.type) {\n    case 'empty':\n      return renderEmptyContent(assembledProps);\n    case 'text':\n      const InternalTextRenderer = renderRegistry.getInternalTextRenderer(\n        props.tnode.tagName\n      );\n\n      if (InternalTextRenderer) {\n        return React.createElement(InternalTextRenderer, tnodeProps);\n      }\n      // If ghost line prevention is enabled and the text data is empty, render\n      // nothing to avoid React Native painting a 20px height line.\n      // See also https://git.io/JErwX\n      if (\n        tnodeProps.tnode.data === '' &&\n        tnodeProps.sharedProps.enableExperimentalGhostLinesPrevention\n      ) {\n        return null;\n      }\n      break;\n    case 'phrasing':\n      // When a TPhrasing node is anonymous and has only one child, its\n      // rendering amounts to rendering its only child.\n      if (\n        tnodeProps.sharedProps.bypassAnonymousTPhrasingNodes &&\n        tnodeProps.tnode.tagName == null &&\n        tnodeProps.tnode.children.length <= 1\n      ) {\n        return React.createElement(TNodeChildrenRenderer, {\n          tnode: props.tnode\n        });\n      }\n      // If ghost line prevention is enabled and the tnode is an anonymous empty\n      // phrasing node, render nothing to avoid React Native painting a 20px\n      // height line. See also https://git.io/JErwX\n      if (\n        tnodeProps.sharedProps.enableExperimentalGhostLinesPrevention &&\n        tnodeProps.tnode.tagName == null &&\n        tnodeProps.tnode.children.every(isGhostTNode)\n      ) {\n        return null;\n      }\n      break;\n  }\n  const renderFn =\n    tnode.type === 'block' || tnode.type === 'document'\n      ? renderBlockContent\n      : renderTextualContent;\n  return Renderer === null\n    ? renderFn(assembledProps)\n    : React.createElement(Renderer as any, assembledProps);\n});\n\nconst defaultProps: Required<Pick<TNodeRendererProps<any>, 'propsFromParent'>> =\n  {\n    propsFromParent: {\n      collapsedMarginTop: null\n    }\n  };\n\n// @ts-expect-error default props must be defined\nTNodeRenderer.defaultProps = defaultProps;\n\nexport {\n  TDefaultBlockRenderer,\n  TDefaultPhrasingRenderer,\n  TDefaultTextRenderer\n};\n\nexport default TNodeRenderer;\n"]},"metadata":{},"sourceType":"script"}