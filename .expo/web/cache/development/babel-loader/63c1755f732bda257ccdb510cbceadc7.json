{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { gql } from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\nvar defaultOptions = {};\n\nexport var AddLikesDocument = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    mutation addLikes($id: String!) {\\n  addLikes(id: $id)\\n}\\n    \"])));\nexport function useAddLikesMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useMutation(AddLikesDocument, options);\n}\nexport var CreateMessagesDocument = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n    mutation createMessages($newMessagesInput: MessagesInput!) {\\n  createMessages(newMessagesInput: $newMessagesInput) {\\n    id\\n    content\\n  }\\n}\\n    \"])));\nexport function useCreateMessagesMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useMutation(CreateMessagesDocument, options);\n}\nexport var CreateNewPostDocument = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n    mutation createNewPost($newPostsInput: PostsInput!) {\\n  createPosts(newPostsInput: $newPostsInput) {\\n    title\\n    intro\\n    content\\n    mainPicture\\n    likes\\n    submitted\\n    validated\\n  }\\n}\\n    \"])));\nexport function useCreateNewPostMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useMutation(CreateNewPostDocument, options);\n}\nexport var GetAllDraftPostsByUserDocument = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n    query getAllDraftPostsByUser {\\n  AllDraftPostsByUserList {\\n    id\\n    title\\n    mainPicture\\n    createdAt\\n    intro\\n    validated\\n    submitted\\n    likes\\n    comments {\\n      author\\n      content\\n      date\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetAllDraftPostsByUserQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetAllDraftPostsByUserDocument, options);\n}\nexport function useGetAllDraftPostsByUserLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetAllDraftPostsByUserDocument, options);\n}\nexport var GetAllMessagesDocument = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose([\"\\n    query getAllMessages {\\n  MessagesList {\\n    id\\n    content\\n    mainPicture\\n    author {\\n      avatar\\n      firstName\\n      id\\n      status\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetAllMessagesQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetAllMessagesDocument, options);\n}\nexport function useGetAllMessagesLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetAllMessagesDocument, options);\n}\nexport var GetAllMessagesInRealTimeDocument = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose([\"\\n    subscription getAllMessagesInRealTime {\\n  messageInRealTime {\\n    id\\n    content\\n    createdAt\\n    mainPicture\\n    author {\\n      firstName\\n      avatar\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetAllMessagesInRealTimeSubscription(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useSubscription(GetAllMessagesInRealTimeDocument, options);\n}\nexport var GetAllNewsDocument = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose([\"\\n    query getAllNews {\\n  NewsList {\\n    id\\n    title\\n    author\\n    content\\n    mainPicture\\n    createdAt\\n    isActive\\n    intro\\n  }\\n}\\n    \"])));\n\nexport function useGetAllNewsQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetAllNewsDocument, options);\n}\nexport function useGetAllNewsLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetAllNewsDocument, options);\n}\nexport var GetAllPartnersDocument = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteralLoose([\"\\n    query getAllPartners {\\n  PartnersList {\\n    id\\n    latitude\\n    longitude\\n    name {\\n      FR\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetAllPartnersQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetAllPartnersDocument, options);\n}\nexport function useGetAllPartnersLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetAllPartnersDocument, options);\n}\nexport var GetAllPostsDocument = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteralLoose([\"\\n    query getAllPosts {\\n  PostsList {\\n    id\\n    title\\n    content\\n    mainPicture\\n    createdAt\\n    validated\\n    likes\\n    intro\\n    comments {\\n      author\\n      content\\n      date\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetAllPostsQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetAllPostsDocument, options);\n}\nexport function useGetAllPostsLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetAllPostsDocument, options);\n}\nexport var GetAllPostsByUserDocument = gql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteralLoose([\"\\n    query getAllPostsByUser {\\n  AllPostsByUserList {\\n    id\\n    title\\n    mainPicture\\n    createdAt\\n    intro\\n    likes\\n    validated\\n    submitted\\n    author {\\n      email\\n    }\\n    comments {\\n      author\\n      content\\n      date\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetAllPostsByUserQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetAllPostsByUserDocument, options);\n}\nexport function useGetAllPostsByUserLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetAllPostsByUserDocument, options);\n}\nexport var GetAllSubmittedPostsByUserDocument = gql(_templateObject11 || (_templateObject11 = _taggedTemplateLiteralLoose([\"\\n    query getAllSubmittedPostsByUser {\\n  AllSubmittedPostsByUserList {\\n    id\\n    title\\n    mainPicture\\n    createdAt\\n    intro\\n    validated\\n    submitted\\n    likes\\n    comments {\\n      author\\n      content\\n      date\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetAllSubmittedPostsByUserQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetAllSubmittedPostsByUserDocument, options);\n}\nexport function useGetAllSubmittedPostsByUserLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetAllSubmittedPostsByUserDocument, options);\n}\nexport var GetAllUsersDocument = gql(_templateObject12 || (_templateObject12 = _taggedTemplateLiteralLoose([\"\\n    query getAllUsers {\\n  usersList {\\n    id\\n    email\\n    firstName\\n    lastName\\n    status\\n    avatar\\n  }\\n}\\n    \"])));\n\nexport function useGetAllUsersQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetAllUsersDocument, options);\n}\nexport function useGetAllUsersLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetAllUsersDocument, options);\n}\nexport var GetNewsByIdDocument = gql(_templateObject13 || (_templateObject13 = _taggedTemplateLiteralLoose([\"\\n    query getNewsById($id: String!) {\\n  News(id: $id) {\\n    id\\n    title\\n    author\\n    content\\n    mainPicture\\n    createdAt\\n    isActive\\n    intro\\n  }\\n}\\n    \"])));\n\nexport function useGetNewsByIdQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetNewsByIdDocument, options);\n}\nexport function useGetNewsByIdLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetNewsByIdDocument, options);\n}\nexport var GetPartnerByIdDocument = gql(_templateObject14 || (_templateObject14 = _taggedTemplateLiteralLoose([\"\\n    query getPartnerById($id: String!) {\\n  Partner(id: $id) {\\n    id\\n    name {\\n      FR\\n    }\\n    content {\\n      FR\\n    }\\n    main_picture\\n  }\\n}\\n    \"])));\n\nexport function useGetPartnerByIdQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetPartnerByIdDocument, options);\n}\nexport function useGetPartnerByIdLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetPartnerByIdDocument, options);\n}\nexport var GetPostsByIdDocument = gql(_templateObject15 || (_templateObject15 = _taggedTemplateLiteralLoose([\"\\n    query getPostsById($id: String!) {\\n  Posts(id: $id) {\\n    id\\n    title\\n    content\\n    mainPicture\\n    createdAt\\n    author {\\n      avatar\\n      firstName\\n      id\\n      status\\n    }\\n    intro\\n    validated\\n    likes\\n    comments {\\n      author\\n      content\\n      date\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetPostsByIdQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetPostsByIdDocument, options);\n}\nexport function useGetPostsByIdLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetPostsByIdDocument, options);\n}\nexport var GetPostsByUserDocument = gql(_templateObject16 || (_templateObject16 = _taggedTemplateLiteralLoose([\"\\n    query getPostsByUser($id: String!) {\\n  PostsByUserList(id: $id) {\\n    id\\n    title\\n    mainPicture\\n    createdAt\\n    intro\\n    likes\\n    comments {\\n      author\\n      content\\n      date\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetPostsByUserQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetPostsByUserDocument, options);\n}\nexport function useGetPostsByUserLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetPostsByUserDocument, options);\n}\nexport var GetTripByIdDocument = gql(_templateObject17 || (_templateObject17 = _taggedTemplateLiteralLoose([\"\\n    query getTripById($id: String!) {\\n  Trip(id: $id) {\\n    id\\n    start_date\\n    locations {\\n      name\\n      latitude\\n      longitude\\n      date\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetTripByIdQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetTripByIdDocument, options);\n}\nexport function useGetTripByIdLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetTripByIdDocument, options);\n}\nexport var GetUsersByIdDocument = gql(_templateObject18 || (_templateObject18 = _taggedTemplateLiteralLoose([\"\\n    query getUsersById($id: String!) {\\n  user(id: $id) {\\n    id\\n    firstName\\n    lastName\\n    email\\n    avatar\\n    audio\\n    bio\\n    lang\\n    status\\n    country\\n    createdAt\\n    lastLogin\\n    city\\n  }\\n}\\n    \"])));\n\nexport function useGetUsersByIdQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetUsersByIdDocument, options);\n}\nexport function useGetUsersByIdLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetUsersByIdDocument, options);\n}\nexport var GetValidatedPostsDocument = gql(_templateObject19 || (_templateObject19 = _taggedTemplateLiteralLoose([\"\\n    query getValidatedPosts {\\n  ValidatedPostsList {\\n    id\\n    title\\n    content\\n    mainPicture\\n    createdAt\\n    validated\\n    likes\\n    intro\\n    comments {\\n      author\\n      content\\n      date\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useGetValidatedPostsQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useQuery(GetValidatedPostsDocument, options);\n}\nexport function useGetValidatedPostsLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useLazyQuery(GetValidatedPostsDocument, options);\n}\nexport var LoginDocument = gql(_templateObject20 || (_templateObject20 = _taggedTemplateLiteralLoose([\"\\n    mutation Login($UsersLoginInput: UsersInput!) {\\n  loginUsers(UsersLoginInput: $UsersLoginInput) {\\n    accessToken\\n    refreshToken\\n    firstName\\n    lastName\\n    avatar\\n    status\\n    email\\n  }\\n}\\n    \"])));\nexport function useLoginMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useMutation(LoginDocument, options);\n}\nexport var OnMessageAddedDocument = gql(_templateObject21 || (_templateObject21 = _taggedTemplateLiteralLoose([\"\\n    subscription onMessageAdded {\\n  messageSent {\\n    id\\n    content\\n    createdAt\\n    mainPicture\\n    author {\\n      firstName\\n      avatar\\n    }\\n  }\\n}\\n    \"])));\n\nexport function useOnMessageAddedSubscription(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useSubscription(OnMessageAddedDocument, options);\n}\nexport var RegisterDocument = gql(_templateObject22 || (_templateObject22 = _taggedTemplateLiteralLoose([\"\\n    mutation Register($newUsersInput: UsersInput!) {\\n  createUsers(newUsersInput: $newUsersInput) {\\n    accessToken\\n    refreshToken\\n    firstName\\n    lastName\\n    avatar\\n    status\\n    email\\n  }\\n}\\n    \"])));\nexport function useRegisterMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useMutation(RegisterDocument, options);\n}\nexport var UpdateTripDocument = gql(_templateObject23 || (_templateObject23 = _taggedTemplateLiteralLoose([\"\\n    mutation updateTrip {\\n  updateTrip {\\n    locations {\\n      name\\n      latitude\\n      longitude\\n      date\\n      description\\n    }\\n  }\\n}\\n    \"])));\nexport function useUpdateTripMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return ApolloReactHooks.useMutation(UpdateTripDocument, options);\n}","map":{"version":3,"names":["gql","ApolloReactHooks","defaultOptions","AddLikesDocument","useAddLikesMutation","baseOptions","options","useMutation","CreateMessagesDocument","useCreateMessagesMutation","CreateNewPostDocument","useCreateNewPostMutation","GetAllDraftPostsByUserDocument","useGetAllDraftPostsByUserQuery","useQuery","useGetAllDraftPostsByUserLazyQuery","useLazyQuery","GetAllMessagesDocument","useGetAllMessagesQuery","useGetAllMessagesLazyQuery","GetAllMessagesInRealTimeDocument","useGetAllMessagesInRealTimeSubscription","useSubscription","GetAllNewsDocument","useGetAllNewsQuery","useGetAllNewsLazyQuery","GetAllPartnersDocument","useGetAllPartnersQuery","useGetAllPartnersLazyQuery","GetAllPostsDocument","useGetAllPostsQuery","useGetAllPostsLazyQuery","GetAllPostsByUserDocument","useGetAllPostsByUserQuery","useGetAllPostsByUserLazyQuery","GetAllSubmittedPostsByUserDocument","useGetAllSubmittedPostsByUserQuery","useGetAllSubmittedPostsByUserLazyQuery","GetAllUsersDocument","useGetAllUsersQuery","useGetAllUsersLazyQuery","GetNewsByIdDocument","useGetNewsByIdQuery","useGetNewsByIdLazyQuery","GetPartnerByIdDocument","useGetPartnerByIdQuery","useGetPartnerByIdLazyQuery","GetPostsByIdDocument","useGetPostsByIdQuery","useGetPostsByIdLazyQuery","GetPostsByUserDocument","useGetPostsByUserQuery","useGetPostsByUserLazyQuery","GetTripByIdDocument","useGetTripByIdQuery","useGetTripByIdLazyQuery","GetUsersByIdDocument","useGetUsersByIdQuery","useGetUsersByIdLazyQuery","GetValidatedPostsDocument","useGetValidatedPostsQuery","useGetValidatedPostsLazyQuery","LoginDocument","useLoginMutation","OnMessageAddedDocument","useOnMessageAddedSubscription","RegisterDocument","useRegisterMutation","UpdateTripDocument","useUpdateTripMutation"],"sources":["/Users/matthieu/Documents/tbpa-mobile/graphql/graphql.tsx"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n};\n\nexport type Comment = {\n  author: Scalars['String'];\n  content: Scalars['String'];\n  date: Scalars['DateTime'];\n};\n\nexport type CommentObject = {\n  __typename?: 'CommentObject';\n  author: Scalars['String'];\n  content: Scalars['String'];\n  date: Scalars['DateTime'];\n};\n\nexport type LocationObject = {\n  __typename?: 'LocationObject';\n  date: Scalars['DateTime'];\n  description: Scalars['String'];\n  latitude: Scalars['Float'];\n  longitude: Scalars['Float'];\n  name: Scalars['String'];\n};\n\nexport type LoginResponse = {\n  __typename?: 'LoginResponse';\n  accessToken: Scalars['String'];\n  avatar: Scalars['String'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  refreshToken: Scalars['String'];\n  status: Scalars['String'];\n};\n\n/** The Messages Model */\nexport type Messages = {\n  __typename?: 'Messages';\n  author?: Maybe<Users>;\n  content?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  id?: Maybe<Scalars['ID']>;\n  mainPicture?: Maybe<Scalars['String']>;\n};\n\nexport type MessagesInput = {\n  author?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<Scalars['String']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  mainPicture?: InputMaybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addLikes: Scalars['String'];\n  createMessages: Messages;\n  createNews: News;\n  createNotes: Notes;\n  createPosts: Posts;\n  createThemes: ThemeCreatedResponse;\n  createUsers: RegisterResponse;\n  deleteNews: Scalars['String'];\n  deleteNotes: Scalars['String'];\n  deletePosts: Scalars['String'];\n  deleteUsers: Scalars['String'];\n  loginUsers: LoginResponse;\n  revokeRefreshTokensForUser: Scalars['Boolean'];\n  updateNotes: Notes;\n  updatePosts: Posts;\n  updateTrip: Trip;\n};\n\n\nexport type MutationAddLikesArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateMessagesArgs = {\n  newMessagesInput: MessagesInput;\n};\n\n\nexport type MutationCreateNewsArgs = {\n  newNewsInput: NewsInput;\n};\n\n\nexport type MutationCreateNotesArgs = {\n  newNotesInput: NotesInput;\n};\n\n\nexport type MutationCreatePostsArgs = {\n  newPostsInput: PostsInput;\n};\n\n\nexport type MutationCreateThemesArgs = {\n  newThemesInput: ThemesInput;\n};\n\n\nexport type MutationCreateUsersArgs = {\n  newUsersInput: UsersInput;\n};\n\n\nexport type MutationDeleteNewsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationDeleteNotesArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationDeletePostsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationDeleteUsersArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationLoginUsersArgs = {\n  UsersLoginInput: UsersInput;\n};\n\n\nexport type MutationRevokeRefreshTokensForUserArgs = {\n  userId: Scalars['String'];\n};\n\n\nexport type MutationUpdateNotesArgs = {\n  editNotesInput: NotesInput;\n};\n\n\nexport type MutationUpdatePostsArgs = {\n  editPostsInput: PostsInput;\n};\n\n/** The News Model */\nexport type News = {\n  __typename?: 'News';\n  author: Scalars['String'];\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  intro?: Maybe<Scalars['String']>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  mainPicture?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n};\n\nexport type NewsInput = {\n  author: Scalars['String'];\n  content?: InputMaybe<Scalars['String']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  intro?: InputMaybe<Scalars['String']>;\n  isActive?: InputMaybe<Scalars['Boolean']>;\n  mainPicture?: InputMaybe<Scalars['String']>;\n  title: Scalars['String'];\n};\n\n/** The Notes Model */\nexport type Notes = {\n  __typename?: 'Notes';\n  backgroundColor?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  isArchived?: Maybe<Scalars['Boolean']>;\n  title: Scalars['String'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type NotesInput = {\n  backgroundColor?: InputMaybe<Scalars['String']>;\n  description: Scalars['String'];\n  id?: InputMaybe<Scalars['ID']>;\n  isArchived?: InputMaybe<Scalars['Boolean']>;\n  title: Scalars['String'];\n};\n\n/** The Partners Model */\nexport type Partners = {\n  __typename?: 'Partners';\n  address?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  content: ContentObject;\n  country?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  intro: IntroObject;\n  latitude: Scalars['Float'];\n  logo?: Maybe<Scalars['String']>;\n  longitude: Scalars['Float'];\n  main_picture?: Maybe<Scalars['String']>;\n  name: NameObject;\n  website?: Maybe<Scalars['String']>;\n};\n\n/** The Posts Model */\nexport type Posts = {\n  __typename?: 'Posts';\n  author: Users;\n  comments: Array<CommentObject>;\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  intro: Scalars['String'];\n  likes?: Maybe<Scalars['Float']>;\n  mainPicture?: Maybe<Scalars['String']>;\n  submitted?: Maybe<Scalars['Boolean']>;\n  title: Scalars['String'];\n  validated?: Maybe<Scalars['String']>;\n};\n\nexport type PostsInput = {\n  author: Scalars['String'];\n  comments?: InputMaybe<Array<Comment>>;\n  content?: InputMaybe<Scalars['String']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  id?: InputMaybe<Scalars['ID']>;\n  intro: Scalars['String'];\n  likes?: InputMaybe<Scalars['Float']>;\n  mainPicture?: InputMaybe<Scalars['String']>;\n  submitted?: InputMaybe<Scalars['Boolean']>;\n  title: Scalars['String'];\n  validated?: InputMaybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Get List of All Draft Posts By User */\n  AllDraftPostsByUserList: Array<Posts>;\n  /** Get List of All Posts By User */\n  AllPostsByUserList: Array<Posts>;\n  /** Get List of All Submitted Posts By User */\n  AllSubmittedPostsByUserList: Array<Posts>;\n  /** Get List of Messages */\n  MessagesList: Array<Messages>;\n  News: News;\n  /** Get List of News */\n  NewsList: Array<News>;\n  Partner: Partners;\n  /** Get List of Partners */\n  PartnersList: Array<Partners>;\n  Posts: Posts;\n  /** Get List of Posts By User */\n  PostsByUserList: Array<Posts>;\n  /** Get List of Posts */\n  PostsList: Array<Posts>;\n  Trip: Trip;\n  /** Get List of Validated Posts */\n  ValidatedPostsList: Array<Posts>;\n  notes: Notes;\n  /** Get List of Notes */\n  notesList: Array<Notes>;\n  user: Users;\n  /** Get List of Users */\n  usersList: Array<Users>;\n};\n\n\nexport type QueryNewsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPartnerArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostsArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPostsByUserListArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryTripArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryNotesArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['String'];\n};\n\nexport type RegisterResponse = {\n  __typename?: 'RegisterResponse';\n  accessToken: Scalars['String'];\n  avatar: Scalars['String'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  refreshToken: Scalars['String'];\n  status: Scalars['String'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  likeAdded: Posts;\n  messageInRealTime: Array<Messages>;\n  messageSent: Messages;\n};\n\nexport type ThemeCreatedResponse = {\n  __typename?: 'ThemeCreatedResponse';\n  desc: Scalars['String'];\n  id: Scalars['String'];\n  intro: Scalars['String'];\n  name: Scalars['String'];\n};\n\nexport type ThemesInput = {\n  desc?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  intro?: InputMaybe<Scalars['String']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\n/** The Trips Model */\nexport type Trip = {\n  __typename?: 'Trip';\n  id: Scalars['ID'];\n  locations: Array<LocationObject>;\n  start_date?: Maybe<Scalars['DateTime']>;\n};\n\n/** The Users Model */\nexport type Users = {\n  __typename?: 'Users';\n  active?: Maybe<Scalars['Boolean']>;\n  app_lang?: Maybe<Scalars['String']>;\n  audio?: Maybe<Scalars['String']>;\n  avatar?: Maybe<Scalars['String']>;\n  bio?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n  email?: Maybe<Scalars['String']>;\n  firstName: Scalars['String'];\n  id: Scalars['ID'];\n  lang: Array<Scalars['String']>;\n  lastLogin: Scalars['DateTime'];\n  lastName: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  tokenVersion: Scalars['Float'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type UsersInput = {\n  active?: InputMaybe<Scalars['Boolean']>;\n  appLang?: InputMaybe<Scalars['String']>;\n  audio?: InputMaybe<Scalars['String']>;\n  avatar?: InputMaybe<Scalars['String']>;\n  bio?: InputMaybe<Scalars['String']>;\n  city?: InputMaybe<Scalars['String']>;\n  country?: InputMaybe<Scalars['String']>;\n  createdAt?: InputMaybe<Scalars['DateTime']>;\n  email?: InputMaybe<Scalars['String']>;\n  firstName?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  lang?: InputMaybe<Array<Scalars['String']>>;\n  lastLogin?: InputMaybe<Scalars['DateTime']>;\n  lastName?: InputMaybe<Scalars['String']>;\n  password?: InputMaybe<Scalars['String']>;\n  status?: InputMaybe<Scalars['String']>;\n  updatedAt?: InputMaybe<Scalars['DateTime']>;\n};\n\nexport type ContentObject = {\n  __typename?: 'contentObject';\n  AR: Scalars['String'];\n  EN: Scalars['String'];\n  ES: Scalars['String'];\n  FR: Scalars['String'];\n  IT: Scalars['String'];\n};\n\nexport type IntroObject = {\n  __typename?: 'introObject';\n  AR: Scalars['String'];\n  EN: Scalars['String'];\n  ES: Scalars['String'];\n  FR: Scalars['String'];\n  IT: Scalars['String'];\n};\n\nexport type NameObject = {\n  __typename?: 'nameObject';\n  AR: Scalars['String'];\n  EN: Scalars['String'];\n  ES: Scalars['String'];\n  FR: Scalars['String'];\n  IT: Scalars['String'];\n};\n\nexport type AddLikesMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type AddLikesMutation = { __typename?: 'Mutation', addLikes: string };\n\nexport type CreateMessagesMutationVariables = Exact<{\n  newMessagesInput: MessagesInput;\n}>;\n\n\nexport type CreateMessagesMutation = { __typename?: 'Mutation', createMessages: { __typename?: 'Messages', id?: string | null, content?: string | null } };\n\nexport type CreateNewPostMutationVariables = Exact<{\n  newPostsInput: PostsInput;\n}>;\n\n\nexport type CreateNewPostMutation = { __typename?: 'Mutation', createPosts: { __typename?: 'Posts', title: string, intro: string, content?: string | null, mainPicture?: string | null, likes?: number | null, submitted?: boolean | null, validated?: string | null } };\n\nexport type GetAllDraftPostsByUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllDraftPostsByUserQuery = { __typename?: 'Query', AllDraftPostsByUserList: Array<{ __typename?: 'Posts', id: string, title: string, mainPicture?: string | null, createdAt: any, intro: string, validated?: string | null, submitted?: boolean | null, likes?: number | null, comments: Array<{ __typename?: 'CommentObject', author: string, content: string, date: any }> }> };\n\nexport type GetAllMessagesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllMessagesQuery = { __typename?: 'Query', MessagesList: Array<{ __typename?: 'Messages', id?: string | null, content?: string | null, mainPicture?: string | null, author?: { __typename?: 'Users', avatar?: string | null, firstName: string, id: string, status?: string | null } | null }> };\n\nexport type GetAllMessagesInRealTimeSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllMessagesInRealTimeSubscription = { __typename?: 'Subscription', messageInRealTime: Array<{ __typename?: 'Messages', id?: string | null, content?: string | null, createdAt?: any | null, mainPicture?: string | null, author?: { __typename?: 'Users', firstName: string, avatar?: string | null } | null }> };\n\nexport type GetAllNewsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllNewsQuery = { __typename?: 'Query', NewsList: Array<{ __typename?: 'News', id: string, title: string, author: string, content?: string | null, mainPicture?: string | null, createdAt: any, isActive?: boolean | null, intro?: string | null }> };\n\nexport type GetAllPartnersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllPartnersQuery = { __typename?: 'Query', PartnersList: Array<{ __typename?: 'Partners', id: string, latitude: number, longitude: number, name: { __typename?: 'nameObject', FR: string } }> };\n\nexport type GetAllPostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllPostsQuery = { __typename?: 'Query', PostsList: Array<{ __typename?: 'Posts', id: string, title: string, content?: string | null, mainPicture?: string | null, createdAt: any, validated?: string | null, likes?: number | null, intro: string, comments: Array<{ __typename?: 'CommentObject', author: string, content: string, date: any }> }> };\n\nexport type GetAllPostsByUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllPostsByUserQuery = { __typename?: 'Query', AllPostsByUserList: Array<{ __typename?: 'Posts', id: string, title: string, mainPicture?: string | null, createdAt: any, intro: string, likes?: number | null, validated?: string | null, submitted?: boolean | null, author: { __typename?: 'Users', email?: string | null }, comments: Array<{ __typename?: 'CommentObject', author: string, content: string, date: any }> }> };\n\nexport type GetAllSubmittedPostsByUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllSubmittedPostsByUserQuery = { __typename?: 'Query', AllSubmittedPostsByUserList: Array<{ __typename?: 'Posts', id: string, title: string, mainPicture?: string | null, createdAt: any, intro: string, validated?: string | null, submitted?: boolean | null, likes?: number | null, comments: Array<{ __typename?: 'CommentObject', author: string, content: string, date: any }> }> };\n\nexport type GetAllUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllUsersQuery = { __typename?: 'Query', usersList: Array<{ __typename?: 'Users', id: string, email?: string | null, firstName: string, lastName: string, status?: string | null, avatar?: string | null }> };\n\nexport type GetNewsByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetNewsByIdQuery = { __typename?: 'Query', News: { __typename?: 'News', id: string, title: string, author: string, content?: string | null, mainPicture?: string | null, createdAt: any, isActive?: boolean | null, intro?: string | null } };\n\nexport type GetPartnerByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetPartnerByIdQuery = { __typename?: 'Query', Partner: { __typename?: 'Partners', id: string, main_picture?: string | null, name: { __typename?: 'nameObject', FR: string }, content: { __typename?: 'contentObject', FR: string } } };\n\nexport type GetPostsByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetPostsByIdQuery = { __typename?: 'Query', Posts: { __typename?: 'Posts', id: string, title: string, content?: string | null, mainPicture?: string | null, createdAt: any, intro: string, validated?: string | null, likes?: number | null, author: { __typename?: 'Users', avatar?: string | null, firstName: string, id: string, status?: string | null }, comments: Array<{ __typename?: 'CommentObject', author: string, content: string, date: any }> } };\n\nexport type GetPostsByUserQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetPostsByUserQuery = { __typename?: 'Query', PostsByUserList: Array<{ __typename?: 'Posts', id: string, title: string, mainPicture?: string | null, createdAt: any, intro: string, likes?: number | null, comments: Array<{ __typename?: 'CommentObject', author: string, content: string, date: any }> }> };\n\nexport type GetTripByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTripByIdQuery = { __typename?: 'Query', Trip: { __typename?: 'Trip', id: string, start_date?: any | null, locations: Array<{ __typename?: 'LocationObject', name: string, latitude: number, longitude: number, date: any }> } };\n\nexport type GetUsersByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetUsersByIdQuery = { __typename?: 'Query', user: { __typename?: 'Users', id: string, firstName: string, lastName: string, email?: string | null, avatar?: string | null, audio?: string | null, bio?: string | null, lang: Array<string>, status?: string | null, country?: string | null, createdAt: any, lastLogin: any, city?: string | null } };\n\nexport type GetValidatedPostsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetValidatedPostsQuery = { __typename?: 'Query', ValidatedPostsList: Array<{ __typename?: 'Posts', id: string, title: string, content?: string | null, mainPicture?: string | null, createdAt: any, validated?: string | null, likes?: number | null, intro: string, comments: Array<{ __typename?: 'CommentObject', author: string, content: string, date: any }> }> };\n\nexport type LoginMutationVariables = Exact<{\n  UsersLoginInput: UsersInput;\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', loginUsers: { __typename?: 'LoginResponse', accessToken: string, refreshToken: string, firstName: string, lastName: string, avatar: string, status: string, email: string } };\n\nexport type OnMessageAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type OnMessageAddedSubscription = { __typename?: 'Subscription', messageSent: { __typename?: 'Messages', id?: string | null, content?: string | null, createdAt?: any | null, mainPicture?: string | null, author?: { __typename?: 'Users', firstName: string, avatar?: string | null } | null } };\n\nexport type RegisterMutationVariables = Exact<{\n  newUsersInput: UsersInput;\n}>;\n\n\nexport type RegisterMutation = { __typename?: 'Mutation', createUsers: { __typename?: 'RegisterResponse', accessToken: string, refreshToken: string, firstName: string, lastName: string, avatar: string, status: string, email: string } };\n\nexport type UpdateTripMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UpdateTripMutation = { __typename?: 'Mutation', updateTrip: { __typename?: 'Trip', locations: Array<{ __typename?: 'LocationObject', name: string, latitude: number, longitude: number, date: any, description: string }> } };\n\n\nexport const AddLikesDocument = gql`\n    mutation addLikes($id: String!) {\n  addLikes(id: $id)\n}\n    `;\nexport type AddLikesMutationFn = Apollo.MutationFunction<AddLikesMutation, AddLikesMutationVariables>;\n\n/**\n * __useAddLikesMutation__\n *\n * To run a mutation, you first call `useAddLikesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddLikesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addLikesMutation, { data, loading, error }] = useAddLikesMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAddLikesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddLikesMutation, AddLikesMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<AddLikesMutation, AddLikesMutationVariables>(AddLikesDocument, options);\n      }\nexport type AddLikesMutationHookResult = ReturnType<typeof useAddLikesMutation>;\nexport type AddLikesMutationResult = Apollo.MutationResult<AddLikesMutation>;\nexport type AddLikesMutationOptions = Apollo.BaseMutationOptions<AddLikesMutation, AddLikesMutationVariables>;\nexport const CreateMessagesDocument = gql`\n    mutation createMessages($newMessagesInput: MessagesInput!) {\n  createMessages(newMessagesInput: $newMessagesInput) {\n    id\n    content\n  }\n}\n    `;\nexport type CreateMessagesMutationFn = Apollo.MutationFunction<CreateMessagesMutation, CreateMessagesMutationVariables>;\n\n/**\n * __useCreateMessagesMutation__\n *\n * To run a mutation, you first call `useCreateMessagesMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessagesMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessagesMutation, { data, loading, error }] = useCreateMessagesMutation({\n *   variables: {\n *      newMessagesInput: // value for 'newMessagesInput'\n *   },\n * });\n */\nexport function useCreateMessagesMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateMessagesMutation, CreateMessagesMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<CreateMessagesMutation, CreateMessagesMutationVariables>(CreateMessagesDocument, options);\n      }\nexport type CreateMessagesMutationHookResult = ReturnType<typeof useCreateMessagesMutation>;\nexport type CreateMessagesMutationResult = Apollo.MutationResult<CreateMessagesMutation>;\nexport type CreateMessagesMutationOptions = Apollo.BaseMutationOptions<CreateMessagesMutation, CreateMessagesMutationVariables>;\nexport const CreateNewPostDocument = gql`\n    mutation createNewPost($newPostsInput: PostsInput!) {\n  createPosts(newPostsInput: $newPostsInput) {\n    title\n    intro\n    content\n    mainPicture\n    likes\n    submitted\n    validated\n  }\n}\n    `;\nexport type CreateNewPostMutationFn = Apollo.MutationFunction<CreateNewPostMutation, CreateNewPostMutationVariables>;\n\n/**\n * __useCreateNewPostMutation__\n *\n * To run a mutation, you first call `useCreateNewPostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNewPostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNewPostMutation, { data, loading, error }] = useCreateNewPostMutation({\n *   variables: {\n *      newPostsInput: // value for 'newPostsInput'\n *   },\n * });\n */\nexport function useCreateNewPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateNewPostMutation, CreateNewPostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<CreateNewPostMutation, CreateNewPostMutationVariables>(CreateNewPostDocument, options);\n      }\nexport type CreateNewPostMutationHookResult = ReturnType<typeof useCreateNewPostMutation>;\nexport type CreateNewPostMutationResult = Apollo.MutationResult<CreateNewPostMutation>;\nexport type CreateNewPostMutationOptions = Apollo.BaseMutationOptions<CreateNewPostMutation, CreateNewPostMutationVariables>;\nexport const GetAllDraftPostsByUserDocument = gql`\n    query getAllDraftPostsByUser {\n  AllDraftPostsByUserList {\n    id\n    title\n    mainPicture\n    createdAt\n    intro\n    validated\n    submitted\n    likes\n    comments {\n      author\n      content\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllDraftPostsByUserQuery__\n *\n * To run a query within a React component, call `useGetAllDraftPostsByUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllDraftPostsByUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllDraftPostsByUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllDraftPostsByUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllDraftPostsByUserQuery, GetAllDraftPostsByUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllDraftPostsByUserQuery, GetAllDraftPostsByUserQueryVariables>(GetAllDraftPostsByUserDocument, options);\n      }\nexport function useGetAllDraftPostsByUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllDraftPostsByUserQuery, GetAllDraftPostsByUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllDraftPostsByUserQuery, GetAllDraftPostsByUserQueryVariables>(GetAllDraftPostsByUserDocument, options);\n        }\nexport type GetAllDraftPostsByUserQueryHookResult = ReturnType<typeof useGetAllDraftPostsByUserQuery>;\nexport type GetAllDraftPostsByUserLazyQueryHookResult = ReturnType<typeof useGetAllDraftPostsByUserLazyQuery>;\nexport type GetAllDraftPostsByUserQueryResult = Apollo.QueryResult<GetAllDraftPostsByUserQuery, GetAllDraftPostsByUserQueryVariables>;\nexport const GetAllMessagesDocument = gql`\n    query getAllMessages {\n  MessagesList {\n    id\n    content\n    mainPicture\n    author {\n      avatar\n      firstName\n      id\n      status\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllMessagesQuery__\n *\n * To run a query within a React component, call `useGetAllMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllMessagesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllMessagesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllMessagesQuery, GetAllMessagesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllMessagesQuery, GetAllMessagesQueryVariables>(GetAllMessagesDocument, options);\n      }\nexport function useGetAllMessagesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllMessagesQuery, GetAllMessagesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllMessagesQuery, GetAllMessagesQueryVariables>(GetAllMessagesDocument, options);\n        }\nexport type GetAllMessagesQueryHookResult = ReturnType<typeof useGetAllMessagesQuery>;\nexport type GetAllMessagesLazyQueryHookResult = ReturnType<typeof useGetAllMessagesLazyQuery>;\nexport type GetAllMessagesQueryResult = Apollo.QueryResult<GetAllMessagesQuery, GetAllMessagesQueryVariables>;\nexport const GetAllMessagesInRealTimeDocument = gql`\n    subscription getAllMessagesInRealTime {\n  messageInRealTime {\n    id\n    content\n    createdAt\n    mainPicture\n    author {\n      firstName\n      avatar\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllMessagesInRealTimeSubscription__\n *\n * To run a query within a React component, call `useGetAllMessagesInRealTimeSubscription` and pass it any options that fit your needs.\n * When your component renders, `useGetAllMessagesInRealTimeSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllMessagesInRealTimeSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllMessagesInRealTimeSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<GetAllMessagesInRealTimeSubscription, GetAllMessagesInRealTimeSubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useSubscription<GetAllMessagesInRealTimeSubscription, GetAllMessagesInRealTimeSubscriptionVariables>(GetAllMessagesInRealTimeDocument, options);\n      }\nexport type GetAllMessagesInRealTimeSubscriptionHookResult = ReturnType<typeof useGetAllMessagesInRealTimeSubscription>;\nexport type GetAllMessagesInRealTimeSubscriptionResult = Apollo.SubscriptionResult<GetAllMessagesInRealTimeSubscription>;\nexport const GetAllNewsDocument = gql`\n    query getAllNews {\n  NewsList {\n    id\n    title\n    author\n    content\n    mainPicture\n    createdAt\n    isActive\n    intro\n  }\n}\n    `;\n\n/**\n * __useGetAllNewsQuery__\n *\n * To run a query within a React component, call `useGetAllNewsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllNewsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllNewsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllNewsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllNewsQuery, GetAllNewsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllNewsQuery, GetAllNewsQueryVariables>(GetAllNewsDocument, options);\n      }\nexport function useGetAllNewsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllNewsQuery, GetAllNewsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllNewsQuery, GetAllNewsQueryVariables>(GetAllNewsDocument, options);\n        }\nexport type GetAllNewsQueryHookResult = ReturnType<typeof useGetAllNewsQuery>;\nexport type GetAllNewsLazyQueryHookResult = ReturnType<typeof useGetAllNewsLazyQuery>;\nexport type GetAllNewsQueryResult = Apollo.QueryResult<GetAllNewsQuery, GetAllNewsQueryVariables>;\nexport const GetAllPartnersDocument = gql`\n    query getAllPartners {\n  PartnersList {\n    id\n    latitude\n    longitude\n    name {\n      FR\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllPartnersQuery__\n *\n * To run a query within a React component, call `useGetAllPartnersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllPartnersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllPartnersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllPartnersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllPartnersQuery, GetAllPartnersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllPartnersQuery, GetAllPartnersQueryVariables>(GetAllPartnersDocument, options);\n      }\nexport function useGetAllPartnersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllPartnersQuery, GetAllPartnersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllPartnersQuery, GetAllPartnersQueryVariables>(GetAllPartnersDocument, options);\n        }\nexport type GetAllPartnersQueryHookResult = ReturnType<typeof useGetAllPartnersQuery>;\nexport type GetAllPartnersLazyQueryHookResult = ReturnType<typeof useGetAllPartnersLazyQuery>;\nexport type GetAllPartnersQueryResult = Apollo.QueryResult<GetAllPartnersQuery, GetAllPartnersQueryVariables>;\nexport const GetAllPostsDocument = gql`\n    query getAllPosts {\n  PostsList {\n    id\n    title\n    content\n    mainPicture\n    createdAt\n    validated\n    likes\n    intro\n    comments {\n      author\n      content\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllPostsQuery__\n *\n * To run a query within a React component, call `useGetAllPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllPostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllPostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllPostsQuery, GetAllPostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllPostsQuery, GetAllPostsQueryVariables>(GetAllPostsDocument, options);\n      }\nexport function useGetAllPostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllPostsQuery, GetAllPostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllPostsQuery, GetAllPostsQueryVariables>(GetAllPostsDocument, options);\n        }\nexport type GetAllPostsQueryHookResult = ReturnType<typeof useGetAllPostsQuery>;\nexport type GetAllPostsLazyQueryHookResult = ReturnType<typeof useGetAllPostsLazyQuery>;\nexport type GetAllPostsQueryResult = Apollo.QueryResult<GetAllPostsQuery, GetAllPostsQueryVariables>;\nexport const GetAllPostsByUserDocument = gql`\n    query getAllPostsByUser {\n  AllPostsByUserList {\n    id\n    title\n    mainPicture\n    createdAt\n    intro\n    likes\n    validated\n    submitted\n    author {\n      email\n    }\n    comments {\n      author\n      content\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllPostsByUserQuery__\n *\n * To run a query within a React component, call `useGetAllPostsByUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllPostsByUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllPostsByUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllPostsByUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllPostsByUserQuery, GetAllPostsByUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllPostsByUserQuery, GetAllPostsByUserQueryVariables>(GetAllPostsByUserDocument, options);\n      }\nexport function useGetAllPostsByUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllPostsByUserQuery, GetAllPostsByUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllPostsByUserQuery, GetAllPostsByUserQueryVariables>(GetAllPostsByUserDocument, options);\n        }\nexport type GetAllPostsByUserQueryHookResult = ReturnType<typeof useGetAllPostsByUserQuery>;\nexport type GetAllPostsByUserLazyQueryHookResult = ReturnType<typeof useGetAllPostsByUserLazyQuery>;\nexport type GetAllPostsByUserQueryResult = Apollo.QueryResult<GetAllPostsByUserQuery, GetAllPostsByUserQueryVariables>;\nexport const GetAllSubmittedPostsByUserDocument = gql`\n    query getAllSubmittedPostsByUser {\n  AllSubmittedPostsByUserList {\n    id\n    title\n    mainPicture\n    createdAt\n    intro\n    validated\n    submitted\n    likes\n    comments {\n      author\n      content\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllSubmittedPostsByUserQuery__\n *\n * To run a query within a React component, call `useGetAllSubmittedPostsByUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllSubmittedPostsByUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllSubmittedPostsByUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllSubmittedPostsByUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllSubmittedPostsByUserQuery, GetAllSubmittedPostsByUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllSubmittedPostsByUserQuery, GetAllSubmittedPostsByUserQueryVariables>(GetAllSubmittedPostsByUserDocument, options);\n      }\nexport function useGetAllSubmittedPostsByUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllSubmittedPostsByUserQuery, GetAllSubmittedPostsByUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllSubmittedPostsByUserQuery, GetAllSubmittedPostsByUserQueryVariables>(GetAllSubmittedPostsByUserDocument, options);\n        }\nexport type GetAllSubmittedPostsByUserQueryHookResult = ReturnType<typeof useGetAllSubmittedPostsByUserQuery>;\nexport type GetAllSubmittedPostsByUserLazyQueryHookResult = ReturnType<typeof useGetAllSubmittedPostsByUserLazyQuery>;\nexport type GetAllSubmittedPostsByUserQueryResult = Apollo.QueryResult<GetAllSubmittedPostsByUserQuery, GetAllSubmittedPostsByUserQueryVariables>;\nexport const GetAllUsersDocument = gql`\n    query getAllUsers {\n  usersList {\n    id\n    email\n    firstName\n    lastName\n    status\n    avatar\n  }\n}\n    `;\n\n/**\n * __useGetAllUsersQuery__\n *\n * To run a query within a React component, call `useGetAllUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllUsersQuery, GetAllUsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetAllUsersQuery, GetAllUsersQueryVariables>(GetAllUsersDocument, options);\n      }\nexport function useGetAllUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllUsersQuery, GetAllUsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetAllUsersQuery, GetAllUsersQueryVariables>(GetAllUsersDocument, options);\n        }\nexport type GetAllUsersQueryHookResult = ReturnType<typeof useGetAllUsersQuery>;\nexport type GetAllUsersLazyQueryHookResult = ReturnType<typeof useGetAllUsersLazyQuery>;\nexport type GetAllUsersQueryResult = Apollo.QueryResult<GetAllUsersQuery, GetAllUsersQueryVariables>;\nexport const GetNewsByIdDocument = gql`\n    query getNewsById($id: String!) {\n  News(id: $id) {\n    id\n    title\n    author\n    content\n    mainPicture\n    createdAt\n    isActive\n    intro\n  }\n}\n    `;\n\n/**\n * __useGetNewsByIdQuery__\n *\n * To run a query within a React component, call `useGetNewsByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetNewsByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetNewsByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetNewsByIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetNewsByIdQuery, GetNewsByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetNewsByIdQuery, GetNewsByIdQueryVariables>(GetNewsByIdDocument, options);\n      }\nexport function useGetNewsByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetNewsByIdQuery, GetNewsByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetNewsByIdQuery, GetNewsByIdQueryVariables>(GetNewsByIdDocument, options);\n        }\nexport type GetNewsByIdQueryHookResult = ReturnType<typeof useGetNewsByIdQuery>;\nexport type GetNewsByIdLazyQueryHookResult = ReturnType<typeof useGetNewsByIdLazyQuery>;\nexport type GetNewsByIdQueryResult = Apollo.QueryResult<GetNewsByIdQuery, GetNewsByIdQueryVariables>;\nexport const GetPartnerByIdDocument = gql`\n    query getPartnerById($id: String!) {\n  Partner(id: $id) {\n    id\n    name {\n      FR\n    }\n    content {\n      FR\n    }\n    main_picture\n  }\n}\n    `;\n\n/**\n * __useGetPartnerByIdQuery__\n *\n * To run a query within a React component, call `useGetPartnerByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPartnerByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPartnerByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetPartnerByIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetPartnerByIdQuery, GetPartnerByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetPartnerByIdQuery, GetPartnerByIdQueryVariables>(GetPartnerByIdDocument, options);\n      }\nexport function useGetPartnerByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPartnerByIdQuery, GetPartnerByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetPartnerByIdQuery, GetPartnerByIdQueryVariables>(GetPartnerByIdDocument, options);\n        }\nexport type GetPartnerByIdQueryHookResult = ReturnType<typeof useGetPartnerByIdQuery>;\nexport type GetPartnerByIdLazyQueryHookResult = ReturnType<typeof useGetPartnerByIdLazyQuery>;\nexport type GetPartnerByIdQueryResult = Apollo.QueryResult<GetPartnerByIdQuery, GetPartnerByIdQueryVariables>;\nexport const GetPostsByIdDocument = gql`\n    query getPostsById($id: String!) {\n  Posts(id: $id) {\n    id\n    title\n    content\n    mainPicture\n    createdAt\n    author {\n      avatar\n      firstName\n      id\n      status\n    }\n    intro\n    validated\n    likes\n    comments {\n      author\n      content\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetPostsByIdQuery__\n *\n * To run a query within a React component, call `useGetPostsByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostsByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostsByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetPostsByIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetPostsByIdQuery, GetPostsByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetPostsByIdQuery, GetPostsByIdQueryVariables>(GetPostsByIdDocument, options);\n      }\nexport function useGetPostsByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPostsByIdQuery, GetPostsByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetPostsByIdQuery, GetPostsByIdQueryVariables>(GetPostsByIdDocument, options);\n        }\nexport type GetPostsByIdQueryHookResult = ReturnType<typeof useGetPostsByIdQuery>;\nexport type GetPostsByIdLazyQueryHookResult = ReturnType<typeof useGetPostsByIdLazyQuery>;\nexport type GetPostsByIdQueryResult = Apollo.QueryResult<GetPostsByIdQuery, GetPostsByIdQueryVariables>;\nexport const GetPostsByUserDocument = gql`\n    query getPostsByUser($id: String!) {\n  PostsByUserList(id: $id) {\n    id\n    title\n    mainPicture\n    createdAt\n    intro\n    likes\n    comments {\n      author\n      content\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetPostsByUserQuery__\n *\n * To run a query within a React component, call `useGetPostsByUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPostsByUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPostsByUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetPostsByUserQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetPostsByUserQuery, GetPostsByUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetPostsByUserQuery, GetPostsByUserQueryVariables>(GetPostsByUserDocument, options);\n      }\nexport function useGetPostsByUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPostsByUserQuery, GetPostsByUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetPostsByUserQuery, GetPostsByUserQueryVariables>(GetPostsByUserDocument, options);\n        }\nexport type GetPostsByUserQueryHookResult = ReturnType<typeof useGetPostsByUserQuery>;\nexport type GetPostsByUserLazyQueryHookResult = ReturnType<typeof useGetPostsByUserLazyQuery>;\nexport type GetPostsByUserQueryResult = Apollo.QueryResult<GetPostsByUserQuery, GetPostsByUserQueryVariables>;\nexport const GetTripByIdDocument = gql`\n    query getTripById($id: String!) {\n  Trip(id: $id) {\n    id\n    start_date\n    locations {\n      name\n      latitude\n      longitude\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetTripByIdQuery__\n *\n * To run a query within a React component, call `useGetTripByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTripByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTripByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTripByIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetTripByIdQuery, GetTripByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetTripByIdQuery, GetTripByIdQueryVariables>(GetTripByIdDocument, options);\n      }\nexport function useGetTripByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTripByIdQuery, GetTripByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetTripByIdQuery, GetTripByIdQueryVariables>(GetTripByIdDocument, options);\n        }\nexport type GetTripByIdQueryHookResult = ReturnType<typeof useGetTripByIdQuery>;\nexport type GetTripByIdLazyQueryHookResult = ReturnType<typeof useGetTripByIdLazyQuery>;\nexport type GetTripByIdQueryResult = Apollo.QueryResult<GetTripByIdQuery, GetTripByIdQueryVariables>;\nexport const GetUsersByIdDocument = gql`\n    query getUsersById($id: String!) {\n  user(id: $id) {\n    id\n    firstName\n    lastName\n    email\n    avatar\n    audio\n    bio\n    lang\n    status\n    country\n    createdAt\n    lastLogin\n    city\n  }\n}\n    `;\n\n/**\n * __useGetUsersByIdQuery__\n *\n * To run a query within a React component, call `useGetUsersByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetUsersByIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetUsersByIdQuery, GetUsersByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetUsersByIdQuery, GetUsersByIdQueryVariables>(GetUsersByIdDocument, options);\n      }\nexport function useGetUsersByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersByIdQuery, GetUsersByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetUsersByIdQuery, GetUsersByIdQueryVariables>(GetUsersByIdDocument, options);\n        }\nexport type GetUsersByIdQueryHookResult = ReturnType<typeof useGetUsersByIdQuery>;\nexport type GetUsersByIdLazyQueryHookResult = ReturnType<typeof useGetUsersByIdLazyQuery>;\nexport type GetUsersByIdQueryResult = Apollo.QueryResult<GetUsersByIdQuery, GetUsersByIdQueryVariables>;\nexport const GetValidatedPostsDocument = gql`\n    query getValidatedPosts {\n  ValidatedPostsList {\n    id\n    title\n    content\n    mainPicture\n    createdAt\n    validated\n    likes\n    intro\n    comments {\n      author\n      content\n      date\n    }\n  }\n}\n    `;\n\n/**\n * __useGetValidatedPostsQuery__\n *\n * To run a query within a React component, call `useGetValidatedPostsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetValidatedPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetValidatedPostsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetValidatedPostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetValidatedPostsQuery, GetValidatedPostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useQuery<GetValidatedPostsQuery, GetValidatedPostsQueryVariables>(GetValidatedPostsDocument, options);\n      }\nexport function useGetValidatedPostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetValidatedPostsQuery, GetValidatedPostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return ApolloReactHooks.useLazyQuery<GetValidatedPostsQuery, GetValidatedPostsQueryVariables>(GetValidatedPostsDocument, options);\n        }\nexport type GetValidatedPostsQueryHookResult = ReturnType<typeof useGetValidatedPostsQuery>;\nexport type GetValidatedPostsLazyQueryHookResult = ReturnType<typeof useGetValidatedPostsLazyQuery>;\nexport type GetValidatedPostsQueryResult = Apollo.QueryResult<GetValidatedPostsQuery, GetValidatedPostsQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($UsersLoginInput: UsersInput!) {\n  loginUsers(UsersLoginInput: $UsersLoginInput) {\n    accessToken\n    refreshToken\n    firstName\n    lastName\n    avatar\n    status\n    email\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      UsersLoginInput: // value for 'UsersLoginInput'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const OnMessageAddedDocument = gql`\n    subscription onMessageAdded {\n  messageSent {\n    id\n    content\n    createdAt\n    mainPicture\n    author {\n      firstName\n      avatar\n    }\n  }\n}\n    `;\n\n/**\n * __useOnMessageAddedSubscription__\n *\n * To run a query within a React component, call `useOnMessageAddedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useOnMessageAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOnMessageAddedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useOnMessageAddedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<OnMessageAddedSubscription, OnMessageAddedSubscriptionVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useSubscription<OnMessageAddedSubscription, OnMessageAddedSubscriptionVariables>(OnMessageAddedDocument, options);\n      }\nexport type OnMessageAddedSubscriptionHookResult = ReturnType<typeof useOnMessageAddedSubscription>;\nexport type OnMessageAddedSubscriptionResult = Apollo.SubscriptionResult<OnMessageAddedSubscription>;\nexport const RegisterDocument = gql`\n    mutation Register($newUsersInput: UsersInput!) {\n  createUsers(newUsersInput: $newUsersInput) {\n    accessToken\n    refreshToken\n    firstName\n    lastName\n    avatar\n    status\n    email\n  }\n}\n    `;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      newUsersInput: // value for 'newUsersInput'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const UpdateTripDocument = gql`\n    mutation updateTrip {\n  updateTrip {\n    locations {\n      name\n      latitude\n      longitude\n      date\n      description\n    }\n  }\n}\n    `;\nexport type UpdateTripMutationFn = Apollo.MutationFunction<UpdateTripMutation, UpdateTripMutationVariables>;\n\n/**\n * __useUpdateTripMutation__\n *\n * To run a mutation, you first call `useUpdateTripMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTripMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTripMutation, { data, loading, error }] = useUpdateTripMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useUpdateTripMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTripMutation, UpdateTripMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return ApolloReactHooks.useMutation<UpdateTripMutation, UpdateTripMutationVariables>(UpdateTripDocument, options);\n      }\nexport type UpdateTripMutationHookResult = ReturnType<typeof useUpdateTripMutation>;\nexport type UpdateTripMutationResult = Apollo.MutationResult<UpdateTripMutation>;\nexport type UpdateTripMutationOptions = Apollo.BaseMutationOptions<UpdateTripMutation, UpdateTripMutationVariables>;"],"mappings":"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"},"metadata":{},"sourceType":"module"}