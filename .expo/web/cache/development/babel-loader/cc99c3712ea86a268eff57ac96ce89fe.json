{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport { StyledComponent as _StyledComponent } from \"nativewind\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, useToast } from 'native-base';\nimport { useUpdateTripMutation } from \"../../graphql/graphql\";\nimport { boatLocationVar } from \"../../variables/boatLocation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DevController = function DevController(_ref) {\n  _objectDestructuringEmpty(_ref);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useUpdateTripMutatio = useUpdateTripMutation(),\n    _useUpdateTripMutatio2 = _slicedToArray(_useUpdateTripMutatio, 1),\n    scrapeBoatData = _useUpdateTripMutatio2[0];\n  var toast = useToast();\n  var scrapeLocation = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var _response$data;\n      setIsLoading(true);\n      var response = yield scrapeBoatData();\n      if ((_response$data = response.data) != null && _response$data.updateTrip) {\n        var _response$data2, _response$data3, _response$data4, _response$data5, _response$data6, _response$data7, _response$data8, _response$data9, _response$data10, _response$data11;\n        setIsLoading(false);\n        boatLocationVar({\n          date: (_response$data2 = response.data) == null ? void 0 : _response$data2.updateTrip.locations[((_response$data3 = response.data) == null ? void 0 : _response$data3.updateTrip.locations.length) - 1].date,\n          description: (_response$data4 = response.data) == null ? void 0 : _response$data4.updateTrip.locations[((_response$data5 = response.data) == null ? void 0 : _response$data5.updateTrip.locations.length) - 1].description,\n          latitude: (_response$data6 = response.data) == null ? void 0 : _response$data6.updateTrip.locations[((_response$data7 = response.data) == null ? void 0 : _response$data7.updateTrip.locations.length) - 1].latitude,\n          longitude: (_response$data8 = response.data) == null ? void 0 : _response$data8.updateTrip.locations[((_response$data9 = response.data) == null ? void 0 : _response$data9.updateTrip.locations.length) - 1].longitude,\n          name: (_response$data10 = response.data) == null ? void 0 : _response$data10.updateTrip.locations[((_response$data11 = response.data) == null ? void 0 : _response$data11.updateTrip.locations.length) - 1].name\n        });\n        toast.show({\n          description: 'Scraping effectué'\n        });\n      }\n    });\n    return function scrapeLocation() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    children: isLoading ? _jsx(Button, {\n      isLoading: true,\n      isLoadingText: \"Chargement...\",\n      onPress: scrapeLocation,\n      children: _jsx(_StyledComponent, {\n        className: \"color-white font-ralewayBold\",\n        component: Text,\n        children: \"Scrape Boat Info\"\n      })\n    }) : _jsx(Button, {\n      isLoadingText: \"Chargement...\",\n      onPress: scrapeLocation,\n      children: _jsx(_StyledComponent, {\n        className: \"color-white font-ralewayBold\",\n        component: Text,\n        children: \"Scrape Boat Info\"\n      })\n    })\n  });\n};\nexport default DevController;\n_NativeWindStyleSheet.create({\n  styles: {\n    \"font-ralewayBold\": {\n      \"fontFamily\": \"Raleway_Bold\"\n    },\n    \"color-white\": {\n      \"color\": \"#FFFFFF\"\n    }\n  }\n});","map":{"version":3,"names":["React","useState","Button","useToast","useUpdateTripMutation","boatLocationVar","DevController","isLoading","setIsLoading","scrapeBoatData","toast","scrapeLocation","response","data","updateTrip","date","locations","length","description","latitude","longitude","name","show"],"sources":["/Users/matthieu/Documents/tbpa-mobile/components/DevController/DevController.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Text, View } from 'react-native'\nimport { Button, useToast } from 'native-base'\nimport PropTypes from 'prop-types'\nimport { useUpdateTripMutation } from '../../graphql/graphql'\nimport { boatLocationVar } from '../../variables/boatLocation'\n\ninterface DevControllerProps {}\n\nconst DevController: React.FunctionComponent<DevControllerProps> = ({}) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [scrapeBoatData] = useUpdateTripMutation()\n  const toast = useToast()\n\n  const scrapeLocation = async () => {\n    setIsLoading(true)\n\n    const response = await scrapeBoatData()\n\n    if (response.data?.updateTrip) {\n      setIsLoading(false)\n      boatLocationVar({\n        date: response.data?.updateTrip.locations[response.data?.updateTrip.locations.length - 1]\n          .date,\n        description:\n          response.data?.updateTrip.locations[response.data?.updateTrip.locations.length - 1]\n            .description,\n        latitude:\n          response.data?.updateTrip.locations[response.data?.updateTrip.locations.length - 1]\n            .latitude,\n        longitude:\n          response.data?.updateTrip.locations[response.data?.updateTrip.locations.length - 1]\n            .longitude,\n        name: response.data?.updateTrip.locations[response.data?.updateTrip.locations.length - 1]\n          .name,\n      })\n      toast.show({\n        description: 'Scraping effectué',\n      })\n    }\n  }\n  return (\n    <View>\n      {isLoading ? (\n        <Button isLoading isLoadingText='Chargement...' onPress={scrapeLocation}>\n          <Text className='color-white font-ralewayBold'>Scrape Boat Info</Text>\n        </Button>\n      ) : (\n        <Button isLoadingText='Chargement...' onPress={scrapeLocation}>\n          <Text className='color-white font-ralewayBold'>Scrape Boat Info</Text>\n        </Button>\n      )}\n    </View>\n  )\n}\n\nexport default DevController\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAA;AAAA;AAEvC,SAASC,MAAM,EAAEC,QAAQ,QAAQ,aAAa;AAE9C,SAASC,qBAAqB;AAC9B,SAASC,eAAe;AAAsC;AAI9D,IAAMC,aAA0D,GAAG,SAA7DA,aAA0D,OAAW;EAAA;EACzE,gBAAkCL,QAAQ,CAAU,KAAK,CAAC;IAAA;IAAnDM,SAAS;IAAEC,YAAY;EAC9B,4BAAyBJ,qBAAqB,EAAE;IAAA;IAAzCK,cAAc;EACrB,IAAMC,KAAK,GAAGP,QAAQ,EAAE;EAExB,IAAMQ,cAAc;IAAA,8BAAG,aAAY;MAAA;MACjCH,YAAY,CAAC,IAAI,CAAC;MAElB,IAAMI,QAAQ,SAASH,cAAc,EAAE;MAEvC,sBAAIG,QAAQ,CAACC,IAAI,aAAb,eAAeC,UAAU,EAAE;QAAA;QAC7BN,YAAY,CAAC,KAAK,CAAC;QACnBH,eAAe,CAAC;UACdU,IAAI,qBAAEH,QAAQ,CAACC,IAAI,qBAAb,gBAAeC,UAAU,CAACE,SAAS,CAAC,oBAAAJ,QAAQ,CAACC,IAAI,qBAAb,gBAAeC,UAAU,CAACE,SAAS,CAACC,MAAM,IAAG,CAAC,CAAC,CACtFF,IAAI;UACPG,WAAW,qBACTN,QAAQ,CAACC,IAAI,qBAAb,gBAAeC,UAAU,CAACE,SAAS,CAAC,oBAAAJ,QAAQ,CAACC,IAAI,qBAAb,gBAAeC,UAAU,CAACE,SAAS,CAACC,MAAM,IAAG,CAAC,CAAC,CAChFC,WAAW;UAChBC,QAAQ,qBACNP,QAAQ,CAACC,IAAI,qBAAb,gBAAeC,UAAU,CAACE,SAAS,CAAC,oBAAAJ,QAAQ,CAACC,IAAI,qBAAb,gBAAeC,UAAU,CAACE,SAAS,CAACC,MAAM,IAAG,CAAC,CAAC,CAChFE,QAAQ;UACbC,SAAS,qBACPR,QAAQ,CAACC,IAAI,qBAAb,gBAAeC,UAAU,CAACE,SAAS,CAAC,oBAAAJ,QAAQ,CAACC,IAAI,qBAAb,gBAAeC,UAAU,CAACE,SAAS,CAACC,MAAM,IAAG,CAAC,CAAC,CAChFG,SAAS;UACdC,IAAI,sBAAET,QAAQ,CAACC,IAAI,qBAAb,iBAAeC,UAAU,CAACE,SAAS,CAAC,qBAAAJ,QAAQ,CAACC,IAAI,qBAAb,iBAAeC,UAAU,CAACE,SAAS,CAACC,MAAM,IAAG,CAAC,CAAC,CACtFI;QACL,CAAC,CAAC;QACFX,KAAK,CAACY,IAAI,CAAC;UACTJ,WAAW,EAAE;QACf,CAAC,CAAC;MACJ;IACF,CAAC;IAAA,gBA1BKP,cAAc;MAAA;IAAA;EAAA,GA0BnB;EACD,OACE,KAAC,IAAI;IAAA,UACFJ,SAAS,GACR,KAAC,MAAM;MAAC,SAAS;MAAC,aAAa,EAAC,eAAe;MAAC,OAAO,EAAEI,cAAe;MAAA;QAChE,SAAS,EAAC,8BAA8B;QAAA;QAAA;MAAA;IAAA,EACvC,GAET,KAAC,MAAM;MAAC,aAAa,EAAC,eAAe;MAAC,OAAO,EAAEA,cAAe;MAAA;QACtD,SAAS,EAAC,8BAA8B;QAAA;QAAA;MAAA;IAAA;EAEjD,EACI;AAEX,CAAC;AAED,eAAeL,aAAa;AAAA;EAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}