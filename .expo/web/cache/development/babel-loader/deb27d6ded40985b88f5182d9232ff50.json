{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar emptyProps = {\n  testID: 'br'\n};\nvar isWeb = _reactNative.Platform.OS === 'web';\nfunction renderEmptyLineBreak(tnode) {\n  var lineHeight = tnode.styles.nativeTextFlow.lineHeight || tnode.styles.nativeTextFlow.fontSize * 1.4;\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      height: lineHeight\n    }\n  });\n}\nvar BRRenderer = function BRRenderer(_ref) {\n  var renderIndex = _ref.renderIndex,\n    renderLength = _ref.renderLength,\n    sharedProps = _ref.sharedProps,\n    tnode = _ref.tnode;\n  var isFirst = renderIndex === 0;\n  var isLast = renderIndex === renderLength - 1;\n  var isLonelyBreak = isFirst && isLast;\n  var shouldCollapse = sharedProps.enableExperimentalBRCollapsing && (isFirst ? isLast && !isWeb : isLast);\n  return isLonelyBreak && shouldCollapse ? renderEmptyLineBreak(tnode) : _react.default.createElement(_reactNative.Text, emptyProps, shouldCollapse ? '' : '\\n');\n};\nBRRenderer.isNativeInternalTextRenderer = true;\nvar _default = BRRenderer;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AACA;AAAA;;;;;;AAIA,IAAMA,UAAU,GAAG;EACjBC,MAAM,EAAE;AADS,CAAnB;AAIA,IAAMC,KAAK,GAAGC,sBAASC,EAAT,KAAgB,KAA9B;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAA4C;EAC1C,IAAMC,UAAU,GACdD,KAAK,CAACE,MAAN,CAAaC,cAAb,CAA4BF,UAA5B,IACAD,KAAK,CAACE,MAAN,CAAaC,cAAb,CAA4BC,QAA5B,GAAwC,GAF1C;EAGA,OAAOC,6BAACC,iBAAD;IAAMC,KAAK,EAAE;MAAEC,MAAM,EAAEP;IAAV;EAAb,EAAP;AACD;AAED,IAAMQ,UAAuC,GAAG,SAASA,UAAT,OAK7C;EAAA,IAJDC,WADkE,QAClEA,WADkE;IAElEC,YAFkE,QAElEA,YAFkE;IAGlEC,WAHkE,QAGlEA,WAHkE;IAIlEZ;EAUA,IAAMa,OAAO,GAAGH,WAAW,KAAK,CAAhC;EACA,IAAMI,MAAM,GAAGJ,WAAW,KAAKC,YAAY,GAAG,CAA9C;EACA,IAAMI,aAAa,GAAGF,OAAO,IAAIC,MAAjC;EACA,IAAME,cAAc,GAClBJ,WAAW,CAACK,8BAAZ,KACCJ,OAAO,GAAGC,MAAM,IAAI,CAAClB,KAAd,GAAsBkB,MAD9B,CADF;EAGA,OAAOC,aAAa,IAAIC,cAAjB,GACHjB,oBAAoB,CAACC,KAAD,CADjB,GAEHkB,eAAMC,aAAN,CAAoBC,iBAApB,EAA0B1B,UAA1B,EAAsCsB,cAAc,GAAG,EAAH,GAAQ,IAA5D,CAFJ;AAGD,CAvBD;AAyBAP,UAAU,CAACY,4BAAX,GAA0C,IAA1C;eAEeZ,U","names":["emptyProps","testID","isWeb","Platform","OS","renderEmptyLineBreak","tnode","lineHeight","styles","nativeTextFlow","fontSize","_react","_reactNative","style","height","BRRenderer","renderIndex","renderLength","sharedProps","isFirst","isLast","isLonelyBreak","shouldCollapse","enableExperimentalBRCollapsing","React","createElement","Text","isNativeInternalTextRenderer"],"sources":["BRRenderer.tsx"],"sourcesContent":["import { TNode } from '@native-html/transient-render-engine';\nimport React from 'react';\nimport { Platform, Text, View } from 'react-native';\nimport { InternalTextContentRenderer } from '../render/render-types';\n\nconst emptyProps = {\n  testID: 'br'\n};\n\nconst isWeb = Platform.OS === 'web';\n\nfunction renderEmptyLineBreak(tnode: TNode) {\n  const lineHeight =\n    tnode.styles.nativeTextFlow.lineHeight ||\n    tnode.styles.nativeTextFlow.fontSize! * 1.4;\n  return <View style={{ height: lineHeight }} />;\n}\n\nconst BRRenderer: InternalTextContentRenderer = function BRRenderer({\n  renderIndex,\n  renderLength,\n  sharedProps,\n  tnode\n}) {\n  // If it is the last child and BR collapsing is enabled, render an empty\n  // string to prevent inserting an undesired space to follow HTML specs,\n  // unless the platform is web and it is also the first child.\n  //\n  // Note that we are taking advantage of the Ghost Line oddity in React\n  // Native, where an empty <Text /> element displays a line, since a\n  // line break opening **and** closing an inline formatting context\n  // should be printed as a one line-height item.\n  const isFirst = renderIndex === 0;\n  const isLast = renderIndex === renderLength - 1;\n  const isLonelyBreak = isFirst && isLast;\n  const shouldCollapse =\n    sharedProps.enableExperimentalBRCollapsing &&\n    (isFirst ? isLast && !isWeb : isLast);\n  return isLonelyBreak && shouldCollapse\n    ? renderEmptyLineBreak(tnode)\n    : React.createElement(Text, emptyProps, shouldCollapse ? '' : '\\n');\n};\n\nBRRenderer.isNativeInternalTextRenderer = true;\n\nexport default BRRenderer;\n"]},"metadata":{},"sourceType":"script"}